name: R CMD Check

on:
  push:
    tags:
      - "v*"
    branches:
      - main
      - pre-release
  pull_request:

jobs:
  build-install-check:
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.config.image }}:${{ matrix.config.tag }}
    name: ${{ matrix.config.image }}, version ${{ matrix.config.tag }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {image: ghcr.io/insightsengineering/rstudio_4.1.0_bioc_3.13, tag: 'latest'}

    steps:
      - name: Gather info from PR
        uses: actions/github-script@v5
        id: get-pr
        if: github.event_name == 'pull_request'
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.rest.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      - name: Checkout repo during PR
        uses: actions/checkout@v2
        if: github.event_name == 'pull_request'
        with:
          repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
          ref: ${{ fromJSON(steps.get-pr.outputs.result).head.ref }}
          path: ${{ github.event.repository.name }}

      - name: Checkout repo from push
        uses: actions/checkout@v2
        if: github.event_name == 'push'
        with:
          path: ${{ github.event.repository.name }}

      - name: Run Staged dependencies
        uses: insightsengineering/staged-dependencies-action@v1
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
          SD_REPO_PATH: ${{ github.event.repository.name }}

      - name: Installed packages and sessionInfo
        run: |
          Rscript -e 'sessionInfo();as.data.frame(installed.packages()[,c("LibPath","Version")])'
        shell: bash

      - name: Install missing LaTeX packages
        run: tlmgr install soul todonotes koma-script subfig bookmark babel-english caption
        shell: bash

      - name: Build R package
        run: |
          R CMD build ${{ github.event.repository.name }}
          echo "PKGBUILD=$(echo *.tar.gz)" >> $GITHUB_ENV
        shell: bash

      - name: Run R CMD CHECK
        run: |
          R CMD check ${{ env.PKGBUILD }}
        shell: bash
        continue-on-error: true
        env:
          _R_CHECK_TESTS_NLINES_: 0

      - name: Check whether JUnit XML report exists
        id: check_junit_xml
        uses: andstor/file-existence-action@v1
        with:
          files: "${{ github.event.repository.name }}.Rcheck/tests/testthat/junit-result.xml"

      - name: Publish Unit Test Summary
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ steps.check_junit_xml.outputs.files_exists == 'true' && github.event_name == 'pull_request' }}
        with:
          check_name: Unit Tests Summary
          files: "${{ github.event.repository.name }}.Rcheck/tests/testthat/junit-result.xml"

      - name: Catch warnings in R CMD check output
        id: catch-errors
        run: |
          x <- tail(readLines("${{ github.event.repository.name }}.Rcheck/00check.log"), 1)
          if (!grepl("^Status", x)) stop("No status line found in R CMD check log")
          if (grepl("ERROR", x)) stop("R CMD check has errors")
          if (grepl("WARNING", x)) stop("R CMD check has warnings")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.tag }}-results
          path: ${{ github.event.repository.name }}.Rcheck/00check.log

      - name: Install R package
        run: R CMD INSTALL ${{ env.PKGBUILD }}
        shell: bash

      - name: Upload package
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.PKGBUILD }}
          name: ${{ env.PKGBUILD }}

  upload-release-assets:
    name: Upload build tar.gz
    needs: build-install-check
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Wait for release to succeed
        timeout-minutes: 2
        uses: lewagon/wait-on-check-action@v1.1.1
        with:
          ref: "${{ github.ref }}"
          check-name: 'Release'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV

      - name: Get package name
        run: echo "PKGBUILD=${{ github.event.repository.name }}_${{ env.RELEASE_VERSION }}.tar.gz" >> $GITHUB_ENV

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: "${{ env.PKGBUILD }}"

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "${{ env.PKGBUILD }}"
          asset_name: "${{ env.PKGBUILD }}"
          tag: "${{ github.ref }}"
          overwrite: false
