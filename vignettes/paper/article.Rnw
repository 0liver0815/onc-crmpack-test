\documentclass[article]{jss}
\usepackage[sumlimits, intlimits, namelimits]{amsmath}

%%\usepackage{Sweave}
%% later to include the paper as vignette use:
%% \documentclass[nojss]{jss}

\newcommand{\tj}[1]{\textcolor{red}{#1}}

\usepackage[colorinlistoftodos,prependcaption,textsize=tiny]{todonotes}
\presetkeys%
    {todonotes}%
    {inline,backgroundcolor=yellow}{}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% declarations for jss.cls %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% to get the default layout:
<<echo=FALSE>>=
options(prompt = "R> ", continue = "+  ", width = 70, useFancyQuotes = FALSE)
Sys.setenv(TEXINPUTS=getwd(),
           BIBINPUTS=getwd(),
           BSTINPUTS=getwd())
opts_chunk$set(cache=TRUE)  # to prevent rerunning the code every time
@


%% almost as usual
\author{Daniel Saban\'es Bov\'e\\Hoffmann-La Roche Ltd \And
        Wai Yin Yeung\\Hoffmann-La Roche Ltd \And
        Giuseppe Palermo\\Hoffmann-La Roche Ltd \And
        Thomas Jaki\\Lancaster University}
\title{Model-based Dose Escalation Designs in R with \pkg{crmPack}}

%% for pretty printing and a nice hypersummary also set:
\Plainauthor{Daniel Saban\'es Bov\'e,
    Wai Yin Yeung,
    Giuseppe Palermo,
    Thomas Jaki} %% comma-separated
\Plaintitle{Model-based Dose Escalation Designs in R with crmPack} %% without formatting
\Shorttitle{\pkg{crmPack}: Model-based Dose Escalation} %% a short title (if necessary)

%% an abstract and keywords
\Abstract{
  \todo{Abstract and keywords to be refined, only as a placeholder for now!}
  Model-based dose escalation designs have gained increasing interest due to the
  need for more efficient and informative Phase I trials. The wide-spread
  implementation of such designs has been hindered by the need for either
  licensing specialized commercial software or programming the design and
  simulations from scratch for each project. Therefore we developed the
  R-package \pkg{crmPack}, which is now publicly available on CRAN. By providing
  a simple and unified object-oriented structure for model-based dose escalation
  designs, crmPack enables the use of standard designs, full flexibility to
  adapt designs to the project, and easy extension to new designs. The framework
  for the designs comprises the data structure, regression model and prior
  distribution specification, maximum increment rules, derivation of the next
  best dose, stopping rules for adaptive sample size, adaptive cohort sizes, and
  starting dose and dose grid specification. In addition to the classic
  continual reassessment method (CRM) and escalation with overdose control
  (EWOC) designs with possibly advanced prior specifications with e.g. mixtures
  and minimal informative priors, crmPack currently features dual-endpoint
  (safety and biomarker) designs and two-part (SAD followed by MAD part)
  designs. \tj{I'd also highlight the option for placebo here}
We introduce crmPack by outlining the design framework and show how easy it is
to specify a design, run simulations, and report dose recommendations during the
trial.
}
\Keywords{CRM, model based dose escalation, dual-endpoint design, \proglang{R}, object oriented}
\Plainkeywords{CRM, model based dose escalation, dual-endpoint design, R, object oriented} %% without formatting
%% at least one keyword must be supplied

%% publication information
%% NOTE: Typically, this can be left commented and will be filled out by the technical editor
%% \Volume{50}
%% \Issue{9}
%% \Month{June}
%% \Year{2012}
%% \Submitdate{2012-06-04}
%% \Acceptdate{2012-06-04}

%% The address of (at least) one author should be given
%% in the following format:
\Address{
  Daniel Saban\'es Bov\'e\\
  F. Hoffmann-La Roche Ltd\\
  Product Development Biostatistics\\
  Grenzacherstrasse 124\\
  4070 Basel, Switzerland\\
  E-mail: \email{sabanesd@roche.com}\\
  Telephone: +41/61/68-73470
}
%% It is also possible to add a telephone and fax number
%% before the e-mail in the following format:
%% Telephone: +43/512/507-7103
%% Fax: +43/512/507-2851

%% for those who use Sweave please include the following line (with % symbols):
%% need no \usepackage{Sweave.sty}

%% end of declarations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% custom commands:
\newcommand{\given}{\,\vert\,}


\begin{document}
%\SweaveOpts{concordance=TRUE}

%% include your article here, just as usual
%% Note that you should use the \pkg{}, \proglang{} and \code{} commands.

%%\section[About Java]{About \proglang{Java}}
%% Note: If there is markup in \(sub)section, then it has to be escape as above.

\section{Introduction}
\label{sec:introduction}

In order to protect the probands undergoing the first tests of new
investigational agents in humans from too toxic doses, Phase I trials start with
low doses and then escalate to higher doses in a sequential fashion. The
probands can either be healthy volunteers (e.g.\ in neurology) or patients
(e.g.\ in oncology), and we will henceforth use only the latter for ease of
presentation. While higher doses of agents are usually expected to deliver
stronger pharmacodynamic effects and hence improved efficacy, higher doses also
usually cause more severe adverse events in the patients. In order to simplify
the decision making usually binary dose-limiting toxicities (DLTs) are defined
(e.g.\ adverse events reaching specific severity levels) before starting the
trial. The maximum tolerated dose (MTD) is then defined as the dose with a
certain probability of DLTs (either using a single value, e.g.\ 33\%, or a
range, e.g.\ 20 to 35\%). Historically, patients were treated at the same
dose in cohorts of three, with the dose for the next cohort then being
determined from the number of DLTs having been observed in the current cohort.

Algorithmic designs like the simple 3+3 design \citep{carter1973} have
disadvantages that have been recognized in the statistics community, see e.g.\
\cite{Paoletti2015}. Fundamentally, the escalation rules of the 3+3 design do
not have any statistical justification \citep{Storer1989} in terms of estimating
an MTD. Moreover, they cannot be extended to address today's Phase I trials,
with extension cohorts, dose escalation of drug combinations and optimal
biological dose determination, naming just a few prominent challenges. Hence
model-based dose escalation designs like the continual reassessment method
\citep[CRM,][]{oquigley1990} have gained increasing interest due to the need for
more efficient and informative Phase I trials. These designs are based in
statistical inference, with dose-toxicity regression models as the backbone, and
are therefore flexible for adaptation to various complex trial designs.
Importantly, they avoid fixing only a few dose levels in advance. For a wider comparison of algorithmic and model based designs see e.g. \cite{jaki2013}.

However, the wide-spread implementation of such designs has been hindered by the
need for either licensing specialized commercial software (thus losing
flexibility) or programming the design and simulations from scratch for each
project (thus losing efficiency). While the models underlying most model-based
dose escalation procedures can easily be fit in standard software with the
capability to fit generalized linear models (e.g. \code{PROC MIXED} in
\proglang{SAS}, \code{glm} in \proglang{Stata} or \proglang{R}), there are still
only few software solutions available dedicated to dose escalation studies.

The commercial packages \proglang{East} (Cytel, Cambridge, MA) and
\proglang{ADDPLAN} (ICON, Dublin, Ireland) both offer extensions to their basic
design software for dose escalation studies (\pkg{ESCALATE} in \proglang{East}
and \pkg{df} in \proglang{Addplan}) implementing the algorithmic 3+3 design and
various versions of the CRM. Similarly \proglang{FACTS} \citep{FACTS} also
offers different common dose escalation methods. Due to the commercial nature of
these implementations there is, however, a limitation on how much the designs
can be tailored towards the individual needs of the study. Similarly static
implementations of methods for dose escalation are available in the
\proglang{Stata} module \pkg{crm} \citep{StataCRM} which implements the CRM and
the  \pkg{dfcrm} package in \proglang{R} which additionally implements the
time-to-event CRM (TITE-CRM) \citep{cheung2000}. Finally the \pkg{bcrm} package
\citep{sweeting2013} offers a wide range of different dose escalation designs.
It implements a variety of one and two parameter models, facilitates different
ways to specify prior distributions, escalation and stopping rules.

In this paper we introduce the \proglang{R} package \pkg{crmPack} for
dose escalation studies. This package differs from existing implementations in
three fundamental ways. Firstly, it is written using S4 classes and methods
\citep{Chambers2008}, which allows customized methodology to be added to the
package while still being able to use the existing supporting functionalities.
Secondly, methods for studies with a placebo group (e.g. for healthy volunteer
studies) are readily implemented. Thirdly, dual endpoint dose escalation methods
that incorporate both safety and efficacy and allow determination of an optimal
biological dose are available.\\

In Section~\ref{sec:framework} we describe the underlying structure of the
package while Section~\ref{sec:using} provides some examples of the usage of the
package including how to add a custom method before we conclude with a
discussion (Section~\ref{sec:discussion}).
\todo{rework this paragraph in the end}

\section{Framework}\label{sec:framework}

For describing the framework of the package we will adapt the general notation
in \cite{Thall2010}. Before we start, we have to install and subsequently load
our package in R:
<<start, warning=FALSE>>=
library("crmPack")
@
As indicated in the startup message, try \code{crmPackHelp()} and
\code{crmPackExample()} to open the help page and the package vignette.

\paragraph{Data}
\label{sec:frame:model}
%
Let $x$ denote one specific treatment, chosen from the set
of possible treatments ${\cal X}$. This could be one specific dose, but also
more generally a vector, containing for example doses of multiple drugs in a
combination trial. After giving treatment $x$ to a patient, the outcome $y$
is observed, typically a safety endpoint as e.g.\ the binary DLT $y \in \{0,
1\}$. Grouping together $n_{j}$ patients in cohort $j$, generating the cohort
$j$ data ${\cal C}_{j} = \{(x_{j}, y_{j,1}), \dotsc, (x_{j},
y_{j,n_{j}})\}$, we can denote the data generated from the first $N$ cohorts as
${\cal D}_{N}= {\cal C}_{1} \cup \dotsb \cup {\cal C}_{N}$.
%
In \pkg{crmPack} the S4 class \code{GeneralData} encapsulates this
notion and subclasses implement concrete data structures.

\paragraph{Model}
\label{sec:frame:model}
%
The core of model-based dose escalation designs is the underlying statistical model. Taking a
Bayesian approach to inference, the model in \pkg{crmPack} consists of firstly the
likelihood, which is either a probability density function $f(y \given x,
\theta)$ or a probability mass function $\Prob(Y=y \given x, \theta)$ of $y$ for
a patient who receives treatment $x$ assuming the parameter (vector) $\theta$,
% (this is the likelihood of $\theta$)
and secondly the prior $p(\theta \given \xi)$ for $\theta$ given fixed
hyperparameters $\xi$.
%
In \pkg{crmPack} the virtual S4 class \code{AllModels} encapsulates this
notion and subclasses implement concrete models.

For example, the class \code{LogisticLogNormal} implements
the logistic regression model \citep{Neuenschwander2008} with
\begin{equation}
\label{eq:LogisticLogNormal}
\mathrm{logit}(\Prob(Y=1 \given x,\theta))
\equiv \mathrm{logit}(\pi(x,\theta))
= \alpha + \beta \log\left(\frac{x}{x^*}\right),
\end{equation}
parameter vector $\theta = (\alpha,\beta)$, dose $x > 0$ and specified
reference dose $x^{*}$. The prior $p(\theta \given \xi)$ is specified
via a bivariate normal distribution on a transformation of $\theta$ to ensure
$\beta > 0$:
\begin{equation}
  \label{eq:bivariateNormal}
  (\alpha, \log(\beta)) \given \xi \sim \mathcal{N}_{2} (\mu, \Sigma)
\end{equation}
with hyperparameters $\xi = (\mu, \Sigma)$ consisting of the prior mean vector
$\mu$ and the prior covariance matrix $\Sigma$.

\paragraph{Decision making for the next dose}
\label{sec:frame:decision-making}
%
Another core element of a dose escalation design concern the decision making
for the next dose $x_{N+1}$ to be tested in the next cohort $N+1$. In the
\cite{Thall2010} notation, the function $\alpha$ is mapping the currently
accumulated data $\mathcal{D}_{N}$ to the dose space $\mathcal{X}$ (or to dose
$0$, meaning to stop the trial because all doses are too toxic):
\begin{equation}
\alpha: {\cal D}_{N} \rightarrow \mathcal{X} \cup \{0\}
\end{equation}
This mapping is commonly specified via the combination of two elements:
The first element is a function $\tau$ for the maximum increments between dose
levels, which can calculate from the current data $\mathcal{D}_{N}$ (including the
current dose $x_{N}$) the maximum possible next dose $t_{N+1}=\tau(\mathcal{D}_{N})$ 
for the next cohort. The second element is a rule $\nu$ indirectly
acting on the current data through the posterior distribution $p(\theta \given
\mathcal{D}_{N})$ and the maximum possible dose $t_{N+1}$ to finally give the
next dose $x_{N+1} = \nu(p(\theta \given \mathcal{D}_{N}), t_{N+1})$.
%
In \pkg{crmPack} maximum increments are specified by subclasses of
\code{Increments}, and the next best dose rule by subclasses of \code{NextBest}.

\paragraph{The design class}
\label{sec:frame:design}
%
Additional features of a design concern the adaptive sizing of the next
cohort and the adaptive stopping of the trial. Those are implemented in
subclasses of \code{CohortSize} and \code{Stopping}, respectively.
Moreover, the starting dose $x_{1}$ is also a feature of the design.
%
Finally, the overall dose escalation design is bundling all the described
features together in a dedicated class typically inheriting from \code{Design}.
%
As noted in \cite{Thall2010}, the operating characteristics of such a complex
dose escalation design can only be evaluated by simulations. This can be done
using the \code{simulate} methods for the design classes, and is recommended to
be performed for a multitude of different scenarios in order to stress-test the
design and to convince oneself of its properties.
%
In particular, the operating characteristics reveal whether the MTD can be 
estimated well by the designs. 
%
In addition, the \code{examine} method evaluates hypothetical trial outcomes and lists the
resulting trial decisions (dose for the next cohort and trial end).

In order to illustrate the use of this object-oriented framework, the next
section contains practical examples on use of the existing functionality as well
as an example for creating new extensions.
\tj{I think this section could use an illustrative graph of the underlying structure. E.g Data with subclasses goes into Model with subclasses and so on. A short paragraph at the beginning to highlight this structure before talking specifics would be useful for readability} 

\section{Using crmPack}\label{sec:using}

We consider a trial in Type II diabetes carried out by Hoffmann-La Roche Ltd.\ 
\todo{do we need a reference here?} \tj{would be nice, but I dont think we are allowed to give more detail} in order to illustrate the functionality.
For each patient, we observed a binary safety (DLT) and a continuous efficacy outcome.
In Section~\ref{subsec:crmtrial} we will show how to implement a CRM design for
dose escalation based on the safety endpoint only, while in
Section~\ref{subsec:dualendpoint} also the efficacy endpoint is considered.
Section~\ref{subsec:extending} gives an example how the \pkg{crmPack}
functionality can be extended.

\subsection{Implementing a CRM trial}
\label{subsec:crmtrial}

Suppose that 12 dose levels ranging from 25 to 300 mg in 25 mg increments of a
novel agent are available in addition to placebo, defining our dose grid 
$\mathcal{X} = \{0.001,25, 50,\dotsc, 300\}$, with $x_{1} = 0.001$ mg representing 
placebo (we used a very small dose for placebo instead of zero, since we considered here a 
logistic regression with likelihood~\eqref{eq:LogisticLogNormal} and
prior~\eqref{eq:bivariateNormal}) and  $x_{2} = 0.25$ being our starting dose.

\paragraph{Minimally informative prior}
%% A fundamental component of any Bayesian approach is the \emph{Prior}
%% distribution for the model parameters, in this case $\alpha$ and $\beta$, which
%% need to be defined.
% If previous studies on the same or similar compounds are available, one could
% think of using an informative prior, and specify the prior parameters manually
% as shown in Section~\ref{sec:frame:model}. 
Here we assume not enough prior information is available on the dose-toxicity relationship, and hence would like to use a \emph{minimally informative prior}
\citep{Neuenschwander2008} which can be easily obtained with the function
\code{MinimalInformative}: \todo{Below max.time=1. Once the paper is finalized
  we could change it into max.time=300}
%% As a result the obtained prior will be defined in
%% terms of a bivariate normal distribution for $(\alpha,log(\beta))$.

<<min-inf,warning=FALSE,message=FALSE>>=
coarseGrid <- c(25, 50, 100, 200, 300)
set.seed(912)
minInfModel <-
  MinimalInformative(dosegrid=coarseGrid, refDose=100, logNormal=TRUE,
                     threshmin=0.1, threshmax=0.2, seed=432,
                     control=list(threshold.stop=0.05,max.time=1))
model <- minInfModel$model
class(model)
@

The resulting \code{model} with prior parameters $\mu = (\Sexpr{round(model@mean[1], 2)},
\Sexpr{round(model@mean[2], 2)})$ and
$\Sigma=
\left(\begin{smallmatrix}
  \Sexpr{round(model@cov[1, 1], 2)} & \Sexpr{round(model@cov[1, 2], 2)} \\
  \Sexpr{round(model@cov[2, 1], 2)} & \Sexpr{round(model@cov[2, 2], 2)}
\end{smallmatrix}\right)
$
will approximately have 5\% probability each for the DLT
rate to exceed 10\% (\code{threshmin} argument) at the 25~mg dose and to be below 20\%
(\code{threshmax}) at the 300~mg dose. Since stochastic optimization is used
internally, setting of a seed is required for reproducibility.
%% The result \texttt{minInfModel} is a list with the element \code{model} being an
%% object of class \code{LogisticLogNormal}.$

\paragraph{Data object definition and visualization}
In this simple case of a univariate dose $x$ resulting in binary DLT
observations $y$, the S4 class \code{Data} can be used. Objects of this class
can be created by calling the accompanying initialization function of the same
name (which is a general convention in \pkg{crmPack}):

<<init-Data>>=
PL <- 0.001
data <- Data(x=c(PL, 25, 25, 25, PL, 50, 50, 50, PL, 100, 100, 100),
             y=c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0),
             cohort=c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3),
             doseGrid=c(PL,seq(25, 300, 25)),
             ID=1:12, 
             placebo=TRUE)
@

The argument \code{x} takes the doses $x_{1}=0.001, $x_{2}=25, x_{3} = 50, x_{4} = 100$ (note
the repetition to match the outcome variables $y_{j,k}$) where \code{doseGrid}
captures the set ${\cal X}$ of all possible doses, \code{y} takes the binary
DLTs (here $y_{3, 3} = 1$ denotes the only DLT having been observed in the 3rd
patient in the 3rd cohort), while \code{cohort} groups the patients together in
cohorts (here $N=3$). The option \code{placebo} is used to specify that this is a 
placebo controlled study, with placebo patients included in each cohort (by definition
the first dose $x_{1}$ is considered to represent placebo). Patient IDs can be given 
optionally in the \code{ID} argument. The data can then be visualized by simply applying 
the \code{plot} function to the object, which allow also to produce a blinded plot with the option \code{blind}:

<<plot-data,fig.show='hold',fig.width=5,fig.height=5,out.width='.35\\linewidth',fig.align='center'>>=
plot(data)
plot(data,blind=TRUE)
@

\paragraph{Sampling from the prior and posterior}
Now that we have the model and the data in place, we can use MCMC sampling for
obtaining the posterior distribution of the model parameters $\theta$, and hence
the DLT rates $\Prob(Y=1 \given x,\theta)$, at various doses $x$. The MCMC
sampling can be controlled with an object of class \code{McmcOptions}, which is
then provided to the \code{mcmc} function, together with the \code{data} and the
\code{model} objects:

<<mcmc-sampling>>=
options <- McmcOptions(burnin=1000, step=2, samples=10000)
set.seed(94)
samples <- mcmc(data, model, options)
@

The posterior mean curve and 95\% equi-tailed credible interval curves for the 
DLT rates can be obtained by supplying
the samples, model and data to the generic \code{plot} function. Similarly we can 
also produce a similar plot without any data, which is giving the prior:

<<plot-model-fit,fig.show='hold',fig.width=5,fig.height=5,out.width='.35\\linewidth',fig.align='center'>>=
plot(samples, model, data) + ggtitle("Posterior")

emptydata <- Data(doseGrid=data@doseGrid, placebo=TRUE)
priorsamples <- mcmc(emptydata, model, options)
plot(priorsamples, model, emptydata) + ggtitle("Prior")
@
As illustrated here, the plots can be customized by using the \pkg{ggplot2} 
functionality. \tj{the two plots are a bit hard to distinguish so I wonder if some more DLTs might be useful in the dataset to show the difference better. Alternatively a word to point out the difference might be sufficient too.}


\paragraph{Decision making for the next dose}
To determine which dose to administer to the next (cohort of) patients we begin by specify the maximum increment function $\tau$. The programme allows different maximum relative increments dependent on the dose level and so the in the example below a maximum increase of 100\% for doses below 100 mg, 50\% for doses in the range from 100 mg to 200 mg, and 33\% for doses equal or above 200 mg with the class \code{IncrementsRelative}:
<<rel-incrs>>=
myIncrements <- IncrementsRelative(intervals=c(0,100,200), increments=c(1,0.5,0.33))
@
This specific rule can then be evaluated on the current dataset ${\cal D}_{N}$ by 
the \code{maxDose} function to obtain the maximum next dose $t_{N+1} = \tau({\cal D}_{N})$:
<<rel-incrs-eval>>=
(nextMaxDose <- maxDose(myIncrements,data))
@

We then define the function $\nu$ for selecting a dose for the next cohort. In this case we would like to select the dose which maximizes the probability of the DLT rate being in the target toxicity range $[0.2, 0.35]$, but with the probability of overdosing not exceeding 25\% \citep{Neuenschwander2008}, using the \code{NextBestNCRM} class: 
<<nextBest-ncrm-def>>=
myNextBest <- NextBestNCRM(target=c(0.2,0.35), overdose=c(0.35, 1),
                           maxOverdoseProb=0.25)
@
This rule can then be evaluated with the function \code{nextBest} to obtain the next dose $x_{N+1}=\nu({\cal D}_{N}, t_{N+1})$:
<<nextBest-ncrm-eval>>=
nextDoseRes <- nextBest(myNextBest, nextMaxDose, samples, model, data)
(nextDoseVal <- nextDoseRes$value)
@
The returned list also contains an accompanying plot, showing the target probabilities as green bars, the overdose probabilities as red bars, the maximum dose as vertical dashed black line, the maximum dose with respect to overdosing as vertical dashed red line, and the final dose recommendation with a red triangle:
<<nextBest-ncrm,fig.width=4,fig.height=4,out.width='.5\\linewidth',fig.align='center'>>=
nextDoseRes$plot
@

\paragraph{Adaptive stopping of the trial}
We would like to stop the dose escalation adaptively if the maximum sample size of $n=30$ patients
has been reached already, or if we have sufficient precision for the MTD estimate, i.e.\ if the probability that the next dose $x_{N+1}$ is in the target toxicity range is above 50\% and for example 9 patients were already dosed within +/- 20\% of it. The corresponding \code{Stopping} class object is constructed by combining the atomic rules with logical operators as follows:
<<stop-rules-def>>=
myStopping1 <- StoppingMinPatients(nPatients=30)
myStopping2 <- StoppingTargetProb(target=c(0.2, 0.35), prob=0.5)
myStopping3 <- StoppingPatientsNearDose(nPatients = 9, percentage = 0.2)
myStopping <- myStopping1 | (myStopping2 & myStopping3)
@
Again, this specific rule can be evaluated by a function, here called \code{stopTrial}, for a specific situation:\tj{is there a way to force the R output to be within the bounds of the paper/box?}
<<stop-rules-eval>>=
stopTrial(myStopping, nextDoseVal, samples, model, data)
@
The result \code{FALSE} means that we cannot yet stop the trial, with the attribute vector giving the results from the atomic stopping rules.


% DSB: continue here
\subsubsection*{Deriving the Operating Characteristic of our CRM Design}
In the last topic of this section, we want to show how to assess the performance of a given CRM design. We first need to specify our design by creating an object of class \code{Design}. It contains our model, our rules for dose escalation (\code{Increments}, \code{nextBest}, \code{Stopping} and \code{cohortSize}), the dose grid (in the example below through the object \code{emptydata}) and our starting dose.
In this case we will use a fixed cohort size of 3 patients on active and 1 patient on placebo (3+1) throughout the study:
<<size-rules>>=
mySize <- CohortSizeConst(3)
mySize.PL <- CohortSizeConst(1)
@
<<design-setup>>=
design <- Design(model=model, nextBest=myNextBest, stopping=myStopping,
                 increments=myIncrements, 
                 cohortSize=mySize, PLcohortSize=mySize.PL,
                 data=emptydata,startingDose=25)
@

We can then start by looking at the \texttt{single trial} operating characteristics of the dose escalation design with the function \code{examine}, which generates a data frame showing the beginning of several hypothetical trial courses under the design. Assuming no DLTs have been seen until a certain dose, then the consequences of different number of DLTs being observed at this dose are shown.

<<design-examine>>=
set.seed(23)
examine(design,options)
@

For the \texttt{many trials} operating characteristics, we have to define a true scenario, from which the data should arise. In this case, this only requires a function that computes the probability of DLT given a dose. Here we use the function contained in the slot \code{prob} of the object \code{model}, for which the dose-toxicity curve is shown below.

<<true-def,fig.width=4,fig.height=4,out.width='.4\\linewidth',fig.align='center'>>=
myTruth <- function(dose){ model@prob(dose, alpha0=4.5, alpha1=8)}
curve(myTruth(x), from=0, to=80, ylim=c(0, 1)) # Plot the True Curve
@

Now we can proceed to the simulations using the function \code{simulate}, which requires as arguments our CRM design, the true toxicity profile, the total number of trials to be simulated and some MCMC options. The argument \code{parallel} can be set to \code{TRUE} if one wish to enable the use of all processors of the computer for running the simulations in parallel. This can yield a meaningful speedup, especially for larger number of simulations.

\todo{Here nsim=10. Once the paper is finalized we could change it into nsim=1000}
<<run-sims>>=
mySims <- simulate(design, truth=myTruth, nsim=10,
                   seed=819,mcmcOptions=options,parallel=FALSE)
@

The result of this call is an object of class \texttt{Simulations} containing multiple slots. For example the \texttt{data} slot contains the list of produced \texttt{Data} objects of the simulated trials. Therefore, we can just use the \code{plot} function to plot the course of e.g. the third simulated trial (as shown below). The slots \code{doses} and \code{stopReasons} contain information about the final MTD and the stopping reason for each trial.

<<third-trial, fig.width=4,fig.height=4,out.width='.3\\linewidth',fig.align='center'>>=
plot(mySims@data[[3]])    # course of the third simulated trial
mySims@doses[3]           # MTD at the end of the third simulated trial
@

Furthermore, with this object, we can apply two methods. First, we can plot it, i.e. we can apply the \code{plot} method:

<<sim-plot, fig.width=4,fig.height=4,out.width='.5\\linewidth',fig.align='center'>>=
plot(mySims)
@

The resulting plot shows on the top panel a summary of the trial trajectories. On the bottom, the proportions of doses tried, averaged over the simulated trials, are shown. Note that you can select the plots by changing the \code{type} argument of \code{plot}, which by default is \code{type = c("trajectory", "dosesTried")}.

Second, we can summarize the simulation results with the \code{summary} method. Here again we have to supply a true dose-toxicity function.

<<sim-summary>>=
simSum <- summary(mySims,truth=myTruth)
simSum
@

A plot of the summary results, giving a bit more details than the textual summary, could be produced with the code \code{plot(simSum)}. \tj{I think this should be shown as very useful for assessing design}



\subsection{Dose escalation with safety and efficacy}
\label{subsec:dualendpoint}

In this section, the dose escalation procedures where two, the safety and efficacy endpoints are incorporated into the study will be introduced. The safety endpoint is the binary DLTs (dose-limiting toxicity) responses and the efficacy endpoint is the continuous biomarker/efficacy response. In this package, either these two responses are modeled jointly, using a single model class and assuming correlation; or are modeled separately using two separate model classes and assuming no correlation. The procedure where the two endpoints are modeled separately will be described now.

The procedures described below are proposed in \cite{yeung2015}. Two models are used to describe the relationship between the responses and their corresponding dose levels. Assume that a total of $k$ dose levels are considered and they are of ascending order such that $d_{(1)} < ... < d_{(k)}$. A two-parameter logistic regression model is used to model the relationship of the probabilities of the occurrence of DLTs and their corresponding dose levels 
\begin{equation}
p(d_{(j)})= \frac{{\rm exp}(\phi_1 + \phi_2 {\rm log}(d_{(j)}))}{1+ {\rm exp}(\phi_1 + \phi_2 {\rm log}(d_{(j)}))}
\end{equation}

for $j=1,...,k$. For the continuous efficacy endpoint, a linear log-log model can be used to describe the dose-efficacy relationship. In here, efficacy responses of subjects without DLTs will be considered. Given no DLTs responses, the efficacy response of subject $i$ is represented by
\begin{equation}\label{loglog}
w_i = \theta_1 + \theta_2 {\rm log(log}d_i) +\epsilon _i
\end{equation}
for $1=1,...,s$ with $ s \leq n$, the total number of subjects and $d_i$ represents the dose level given to subject $i$. $\epsilon_i$ the random error term $\epsilon_i \sim N(0, \sigma^2)$ of subject $i$. 

For both models the prior will be expressed in form of pseudo data, some imaginary data as if for some observations we already had before the trial starts \citep[see][for details]{yeung2015}. Based on the pseudo-data, the prior modal estimates of the model parameters are the same as the maximum likelihood estimates which can be computed using standard statistical software fits. When more DLTs observations are available, standard software fits can also be used to obtain posterior modal estimates for the model parameters \citep{w06}. The precision $\nu=\sigma^{-2}$ for the efficacy model, can be specified with a fixed value or having a gamma distribution.



\textbf{Corresponding Model classes in crmPack package}

The \texttt{ModelPseudo} class contains all model classes where the priors are specified in terms of pseudo data and when standard maximum likelihood procedures are used to obtain prior and posterior estimates. Models for the DLT data are captured in the \texttt{ModelTox} class while the efficacy models are in the \texttt{ModelEff}.

To define a design that finds the optimal dose level which represents the best trade-off between the DLTs and efficacy response for the study above using a two-parameter logistic model for DLTs and a linear log-log model for efficacy we define the data via:
<<Data>>=
data1 <- Data(doseGrid=seq(25,300,25))
data2 <- DataDual(doseGrid=seq(25,300,25))
##new observations availabe and out in a data3
data3 <-DataDual(x=c(25,50,50,75,100,100,225,300),
y=c(0,0,0,0,1,1,1,1),
w=c(0.31,0.42,0.59,0.45,0.6,0.7,0.6,0.52),
doseGrid=seq(25,300,25))
@

Both \code{data1} and \code{data2} are empty data set \tj{why?}. If only DLTs response is incorporated into the escalation process, empty data set \code{data1} of class \texttt{Data} can be used. If both DLTs and efficacy responses are incorporated into the procedure, empty data set \code{data2} of class \texttt{DataDual} can be used. \tj{previous 2 sentences unclear}


The pseudo-data for the prior of the DLTS are described as follows: Assuming 3 subjects each are treated at the lowest (25mg) and the highest (300mg) dose level and clinical pharmacologists' opinions for the number of DLTs observed are 1.05 and 1.8 at these two dose levels. That is the probability of a DLTs occurring at 25 and 300 mg are 0.35 and 0.6, respectively.
The number of DLTs 1.05 and 1.8 are non-integer values, which is allowed in the imaginary nature of the pseudo-data. Then we can defined the two-parameter logistic DLT model using the \texttt{LogisticIndepBeta} class model as
<<DLTmodel>>=
DLTmodel <- LogisticIndepBeta(binDLE= c(1.05,1.8),
                              DLEweights=c(3,3),
                              DLEdose=c(25,300),
                              data=data1)
@

The slot \code{DLEdose} represented the two dose levels at which pseudo data are imagined while \code{DLEweights} specifies how many subjects this information is worth (here 3 subjects per dose level) while \code{binDLE} sets the total number of DLEs observed at these dose levels. Since no actual observations are available before the trial start, we specify the \code{data} slot of this model with the empty data set \code{data1} of class \texttt{Data}. Note that, pseudo responses at two different dose levels are need to obtain the prior modal estimate of the intercept and the slope of the model.

The efficacy model can similarly be specified as
<<Effmodel>>=
Effmodel <- Effloglog(Eff= c(1.223,2.513),
                      Effdose=c(25,300),
                      nu=c(a=1,b=0.025),
                      data=data2)
@

The slot \code{Eff} represents the vector of pseudo efficacy responses at the two fixed dose levels and are given by assuming one subject is treated at each of these dose levels. \\

\textit{Safety Constraints}\\

A study will be stopped when all dose levels under consideration are unsafe. Following \cite{yeung2015} two DLTS limits are specified: 1) $\gamma^{**}$ is the highest risk to be faced by subjects during the trial and 2) $\gamma^{*} \leq \gamma^{**}$ is the highest risk for subsequently treated subjects for future studies.The slightly higher risk of DLE allowed during the study will allow better exploration of the region of interest and hence improved performance. Therefore, we will not administer any dose exceeding the current posterior estimate of $d^{**}$ to the next or next cohort of subjects. At the end of a trial, we do not recommend any dose exceeding the final posterior estimate of $d^*$.\\

\textit{Escalation rule}\\

A gain function to reflect the trade-off between efficacy and safety is used to determine the dose for the next or next cohort of subjects. Here we will use
\begin{equation}
G_{(j)}=\frac{E(w_{(j)})}{1+{\rm exp}(\phi_1+\phi_2 {\rm log} d_{(j)})}
\end{equation}
for $j=1,...,k$ where $w_{j}$ are the efficacy responses observed at dose $j$ given that no DLT is observed. To utilize this gain function to select the next dose 
<<NextBestGain>>=
GainNextBest <-NextBestMaxGain(DLEDuringTrialtarget=0.35,
                               DLEEndOfTrialtarget=0.3)
@

can be used where \code{DLEDuringTrialtarget} specifies the maximum DLT rate during the study and \code{DLEEndOfTrialtarget} set the maximum at the end of the study. 

The method \code{nextBest} can be applied to any of the classes defined under the parent \texttt{NextBest} class, to compute the next best dose during the study. Therefore we can, assuming we have some observations capture in data set \texttt{data3}, we can obtain the next recommended dose based on the gain function in the following way.

<<nextBest>>=
newDLTmodel <- update(object=DLTmodel, data=data3)
newEffmodel <- update(object=Effmodel, data=data3)
doseRecGain <- nextBest(GainNextBest,
                        doselimit=max(data3@doseGrid),
                        model=newDLTmodel,
                        Effmodel=newEffmodel,
                        data=data3)

@

Firstly the model parameters are updated with the \texttt{update} function and subsequently the next recommended dose found via \texttt{nextBest} specifying the rule to use the gain function (\texttt{GainNextBest}). The \verb|$| operator can be used to extract specific content from the results.\tj{I think this is pretty standard for R so I think those examples can go. I assume the figure can also be created useing plot(doseRecGain)? as the graph ought to stay and be described.} For example,
<<doseRecommendation>>=?
#What is the next dose
doseRecGain$nextdose
#What is estimate of the maximum dose that is safe
doseRecGain$TDtargetDuringTrialEstimate
#What is the estimate of Gstar
doseRecGain$GstarEstimate
#Plot to show what is the next dose
print(doseRecGain$plot)
@

\tj{I'd just discuss the graph and leave everything else out}. We can see that the estimates for Gstar is 79.4 and 52.3 for the dose with probability of DLTs equals to 0.35(DLEtargetDuringTrial). From our rule, we will select a dose which is safe and gives the maximum gain value. In other words, we will select the dose at dose grid less than or equal to the minimum of 79.4 and 52.3, which is 50mg for the next cohort of subject as shown above for next dose. Furthermore from the plot, the red, blue and green curves are the corresponding estimated curves for DLTs, efficacy and gain. From vertical lines in the plot show what will be the next and maximum dose allowable dose for the next cohort of subject, The circle, square and triangle symbols also show the estimates of the dose at target probability if DLTs during or end of trial and at maximum gain value.\\


\texttt{Stopping rules}

\tj{not sure we need that section. it has been specified before how to do stopping rules so other than presenting a new rule this does not add anything I think.} Subjects are treated sequentially in a study and the trial will stop if a fixed sample size is reached or one of the stopping criteria is fulfilled. We will applied the stopping rule described in \cite{yeung2015}. The idea of this stopping rule is that the trial will be stopped when we obtain an 'accurate enough' estimates of the dose to be recommended for subsequent trial which will be the final estimate of $d^*$ or the final estimate of the minimum of $d^*$ and $g^*$.

In particular, the 95\% credibility interval (CI) of the selected quantity obtained after each cohort of subjects treated will be used to assess if we have already obtained an 'accurate enough' estimate. The wider the CI, the less accurate of this CI. More specifically, the ratio of the upper to the lower limit of this CI is calculated. If this ratio is less than or equal to a pre-specified value, the target ratio, the trial will stop. The smaller the value of the calculated ratio, the more accurate of the estimate. Therefore, the smaller the value we specify for the target ratio, the more precise the estimate we can obtain. To note, the number of subjects to recruit in a study will increase when more precise estimation are required.\\

\textbf{Corresponding Stopping classes in crmPack package}\\

All of the stopping rules classes inherit directly from the \texttt{Stopping} class. The class \texttt{StoppingTDCIRatio} is the stopping rule when only DLTs response are incorporated. The trial will stop if the ratio of the upper and the lower 95\% CI of the posterior estimate of $d^*$ is less than or equal to the pre-specified target ratio. Similarly for \texttt{StoppingGstarCIRatio} is the stopping class when DLTs and efficacy responses are incorporated into the study for which the estimated ratio of the CI of the selected quantity (minimum of the posterior estimate of $d^*$ and $g^*$) will be used as a criteria. For example,

<<Stopping>>=
myStopping2 <- StoppingGstarCIRatio(targetRatio=5,
                                    targetEndOfTrial = 0.3)
@

For  \texttt{StoppingGstarCIRatio}, the value of the target ratio have to be specified in the \code{targetRatio} slot and slot \code{targetEndOfTrial} for the value of the target probability of DLTs to be used at the end of the trial is also required. There are more \texttt{Stopping} classes defined in this package. Please refer to the help pages for further details.\\

\textbf{Simulations}\\

To simulate the operating characteristics a design has to be built. Here we will specify our increment restriction as
<<Increments>>=
myIncrements <- IncrementsRelative(intervals=c(25,300),
                                 increments=c(2,2))
@
which means a maximum of 3-fold increase for dose levels between 25 to 300 mg are defined. The design for the simulations can then be defined using the \texttt{DualResponsesDesign} class. We want to start the simulations with an empty data set and start with the lowest dose 25 mg. \tj{if stopping rules go this probably need changing to reuse a previous stopping rule.}

<<design>>=
design1 <- DualResponsesDesign(nextBest=GainNextBest,
                               model=DLTmodel,
                               Effmodel=Effmodel,
                               data=data2,
                               stopping=myStopping1,
                               increments=myIncrements,
                               cohortSize=mySize,
                               startingDose=25)
@

This is very similar to how we specified the design for the CRM trial. The only difference are the design class (\texttt{DualResponsesDesign}), the escalation rule (\texttt{GainNextBest}) and an additional slot for the efficacy model have to be used.  We can then specify the scenario for the simulation, that is the true DLT and efficacy curves that we will using.

<<scenario>>=
myTruthDLT<- function(dose)
{ DLTmodel@prob(dose, phi1=-53.66584, phi2=10.50499)
}

myTruthEff<- function(dose)
{Effmodel@ExpEff(dose,theta1=-4.818429,theta2=3.653058)
}

myTruthGain <- function(dose)
{return(myTruthEff(dose) * (1-myTruthDLT(dose)))}
@

After establishing the real scenario and the design, the trial can be simulated. The function \code{simulate} is used to simulate trial(s) based a a specified scenario.

<<simulate>>=
Sim1 <- simulate(object=design1,
                 args=NULL,
                 trueDLE=myTruthDLT,
                 trueEff=myTruthEff,
                 trueNu=1/0.025,
                 nsim=20,
                 seed=819,
                 parallel=FALSE)
@

The results of the simulation can then be plotted and summarized as shown before.

\subsection{Extending crmPack functionality}
\label{subsec:extending}

\todo{Daniel/Winnie: example how new models / stopping rules can be implemented by the user -> important!}

One of the big advantages of \pkg{crmPack} over existing implementation in R is its constructed using S4 classes. This allows users to extend the package easily to the specific needs of the study while still being able to utilize the existing classes and methods defined in the package.

In this package, all dose-response models are contained in \texttt{AllModels} class and in either of the two subclasses of \texttt{AllModels}, \texttt{GeneralModel} or \texttt{ModelPseudo}. The models (classes) defined under \texttt{GeneralModel} involved MCMC sampling to obtain estimates for their model parameters where model parameters of models defined under \texttt{ModelPseudo} can be obtained without involving MCMC sampling. Two further subclasses, \texttt{ModelTox}, a class which contains all models for dose-toxicity relationship and \texttt{ModelEff}, a class which contains all model for dose-efficacy relationship are defined under \texttt{ModelPseudo}.

In \citep{oquigley1990}, the continual reassessment method (CRM) is proposed. This is one of the most well-known procedures used in phase I dose escalation trials. Assuming risk of DLTs increases with increasing doses, a one-parameter model is assumed under the CRM to describe the relationship between the binary DLT responses and their corresponding dose levels.
In the current version of the \pkg{crmPack}, only the two parameter logistic regression model of class \texttt{LogisticIndepBeta} are defined under \texttt{ModelTox} class. An example will be given to demonstrate how the one-parameter model can be implemented into the \pkg{crmPack}. 
%Users can use similar techniques to set up their own S4 classes and methods to implement into the package.

Assume $k$ dose levels $d_{(1)} < ...< d_{(k)}$ are considered, the prior guess of the probability of the occurrence of DLTs at dose $d_{(j)}$ for any $j=1,...,k$ is denoted by $\pi_j$ such that $\pi_1 < ...<\pi_k$. The one-parameter power model introduced in \citep{oquigley1990} suggested that the probability of the occurrence of DLTs, $p(d_{(j)})$ at dose $j$ will be given as \begin{equation}
p(d_{(j)}) = \pi^{\theta}_j
\end{equation}
for $j=1,...,k$. An exponential distribution with distribution parameter $\lambda$ will be imposed as the prior distribution of the unknown parameter $\theta$. In particular, fixing $\lambda=1$,  the prior is denoted by $\theta \sim {\rm Exp}(1)$
%with the prior probability density function denoted as
%\begin{equation}
%h_0(\theta)= e^{-\theta}
%\end{equation}.
In addition, the prior expectation $E_0(\theta)=1/\lambda= 1$ will be taken as the prior estimate of $\theta$.

Given more binary DLT observations and the likelihood function of the prior and the observed DLT responses are known, the posterior likelihood density can be computed using Bayes theorem and is conjugate to the prior.
Let $\boldsymbol y$ be the vector contain all DLT responses observed.
%The likelihood of the observation $\boldsymbol y= (y_1,...,y_s)$ for subjects $1,...,s$ % given $\theta$ is given by \begin{equation*}
%f(\boldsymbol \textbf{y};\theta)= \prod^s_{i=1} (\pi_{d_{(i)}}^{\theta})^{y_i} (1- \pi_{d_{(i)}}^{\theta})^{(1-y_i)}.
%\end{equation*}
%By Bayes theorem, we can deduce the probability density function of $\theta$ given the observations $\boldsymbol y$ which is written as
%\begin{equation*}
%h(\theta; \boldsymbol y)=\frac{h_0(\theta) f(\boldsymbol y;\theta)}{\int^{\infty}_0 h_0(\theta) f(\boldsymbol y;\theta) \,d\theta}.
%\end{equation*}
%This is called the posterior probability density function of $\theta$ given the observations $\boldsymbol y$. `
%The posterior expectation is then easily deduced from the above expressions as
%\begin{equation*}
%E(\theta; \boldsymbol y)=\int^{\infty}_{0} \theta h(\theta;\boldsymbol y) \,d\theta ,
%\end{equation*}

Then by integrating $\theta$ times the posterior density of $\theta$, the expectation $E(\theta; \boldsymbol y)$ of $\theta$ can be obtained and will be used as the posterior estimate of $\theta$. The posterior probabilities of the occurrence of DLT at each dose levels can be updated using the following equation
\begin{equation}
p(d_{(j)} ; \boldsymbol y) = \pi_j^ {E(\theta; \boldsymbol y)}
\end{equation}
for dose $j=1,...,k$.

Then in order to implement the one-parameter model in \pkg{crmPack}, an appropriate class has to be defined. This model will be defined under \texttt{ModelTox} such that instead of using MCMC sampling, the Bayes theorem will be used to obtain posterior estimates.
The code for defining this model class \texttt{OneParaExponential} consists of the following two sets of codes. First, a S4 model class has to be set up using \code{setClass} command
%\begin{CodeChunk}
%\begin{CodeInput}
<<classOnePara>>=
.OneParaExponential<-
  setClass(Class="OneParaExponential",
           representation(priorprobDLT="numeric",
                          priorprobDose="numeric",
                          priorlambda="numeric",
                          probDLT="numeric",
                          meanTheta="numeric"),
           prototype(priorprobDLT=c(0,0),
                     priorprobDose=c(1,1),
                     priorlambda=1),
           contains="ModelTox")
@
%\end{CodeInput}
%\end{CodeChunk}

As \texttt{OneParaExponential} class model is contained in the \texttt{ModelTox} class, it inherits all methods and slots from \texttt{ModelTox} class. The slots for this model have to be defined by users in \code{representation} and the initial value of these slots can also be specified in \code{prototype}.

Then a function for this class has to be defined and is given as follow.

%\begin{CodeChunk}
%\begin{CodeInput}
<<FunOnePara>>=
OneParaExponential<- function(priorprobDLT,
                              priorprobDose,
                              priorlambda,
                              data)
{ ##prior density function of theta
   h0 <- function(theta){exp(-theta)}
   ##if no observed DLE(data)
  if (length(data@y)==0){
    priormeanTheta <- 1/ priorlambda
    probDLT <- (priorprobDLT)^priormeanTheta
    meanTheta <- priormeanTheta
    } else {
             f <- function(theta){
             a1 <- length(data@x)
             f0 <-1
             for (j in 1:a1){
                f0 <- f0 * 
                      ((priorprobDLT[which(data@x[j]==data@doseGrid)])^theta)^data@y[j] *
(((1- priorprobDLT[which(data@x[j]==data@doseGrid)])^theta)^(1-data@y[j]))                         }
                        return(f0)}
                     ##posterior denisty of theta
                H <- function(theta){h0(theta)*f(theta)}
                ##using Bayes theorem to obtain new estimate of the mean theta
                     ##denominator of the Bayes theorem
                     denom <- integrate(H,0,Inf)
                     ##Then for numerator
                     H2<- function(theta){H(theta)*theta}
                     numer <- integrate(H2,0,Inf)
                     meanTheta <- numer$value/denom$value
                     probDLT <- priorprobDLT^meanTheta
                     }
.OneParaExponential(datanames=c("nObs","y","x"),
                    data=data,
                    priorprobDLT=priorprobDLT,
                    priorprobDose=priorprobDose,
                    priorlambda=priorlambda,
                    probDLT=probDLT,
                    meanTheta=meanTheta,
                    dose=function(prob, meanTheta){
                       pj <- priorprobDLT^meanTheta
                       Ix1 <- max(which(pj <= prob))
                       Ix2 <- min(which(pj > prob))
                       DOSE <- priorprobDose[Ix1] + 
                         (priorprobDose[Ix2]-priorprobDose[Ix1])*
                         (prob-pj[Ix1])/(pj[Ix2]-pj[Ix1])
                       return(DOSE)},
                     prob=function(dose,meanTheta){
                       pj <- priorprobDLT^meanTheta
                       IxD1 <- max(which(dose <= priorprobDose))
                       IxD2 <- min(which(dose > priorprobDose))
                       p1 <- pj[IxD1] + 
                         (pj[IxD2]-pj[IxD1])*
                         (dose-priorprobDose[IxD1])/
                         (priorprobDose[IxD2]-priorprobDose[IxD1])
                       return(p1)
                     }
  )
}
@
%\end{CodeInput}
%\end{CodeChunk}


Using this model class, the prior guess of the probabilities of the occurrence of DLE, their corresponding dose levels, the value of the parameter $\lambda$ of the prior exponential distribution for the model parameters and any observed DLE responses have to be specified. Assuming the dose levels considered are of ascending order, the initial guess of all these probabilities and their corresponding dose levels consider have to specify in form of vectors in slots \code{priorprobDLT} and \code{priorprobdose}, respectively. Since an exponential distribution will be used as the prior distribution of the only parameter in the dose-DLE model, a positive value of the parameter $\lambda$ of the exponential distribution has to be specified in slot \code{priorlambda}. Finally, any observed DLE responses can be specified in the \code{data} slot inherit from \texttt{ModelTox} class. Using this model, the prior and posterior mean value of the model parameter $\theta$ and probabilities of the occurrence of DLE at all dose levels are computed. The following commands will show how we define the model and obtain model parameters' estimates.

<<Onepara>>=
OneParaModel <- OneParaExponential(priorprobDLT=seq(0.1,0.98,0.08),
                                   priorprobDose=seq(25,300,25),
                                   priorlambda=1,data=data)
OneParaModel@meanTheta
OneParaModel@probDLT
@

Methods inherited from \texttt{ModelTox} class such as \code{dose} and \code{prob} can also be used for 
\texttt{OneParaExponential} class as shown.
<<dose-prob>>=
dose(prob=0.55,model=OneParaModel)
prob(dose=50,model=OneParaModel)
@

Users can also customized or set up other methods corresponds to a class using the \code{setMethod} commands.
-- May need to demonstrate here how the user can set up their method using setMethod? may be something about stopping method?



\section{Summary}
\label{sec:discussion}

In this paper we have introduced the \proglang{R} package \pkg{crmPack} for
analyzing and evaluating dose escalation trials. Unlike existing software the
package is written to make full use of a class structure enabling easy
extensions to user-specific dose-response models, prior distributions,
escalation and stopping rules. The package does, however, already include a wide
range of model-based and algorithmic dose escalation procedures providing
end-users easy access to these approaches without the need for further coding.
Another unique feature of the package is the inclusion of approaches that allow
placebo data, which are routinely collected in healthy volunteer studies, to be
utilized. Finally some methods \cite[e.g.][]{bekele2005,yeung2015} for
dose-finding incorporating safety and efficacy are readily implemented already
in the package and the underlying structure to extend to novel dual endpoint
methods is provided. Simulation facilities for all approaches and relevant
graphical displays are also provided.\\

Future extensions of \pkg{crmPack} will include model-based combination dose
escalation designs, see for example \cite{Riviere2014} for a recent review.
Furthermore, data-augmentation CRM designs \citep{Liu2013} that allow for
shorter trial lengths when DLEs occur shortly after the first drug
administration will be included.


\bibliography{article}

\end{document}

%  LocalWords:  customized hyperparameters
