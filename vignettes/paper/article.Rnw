\documentclass[article]{jss}
\usepackage[sumlimits, intlimits, namelimits]{amsmath}

%%\usepackage{Sweave}
%% later to include the paper as vignette use:
%% \documentclass[nojss]{jss}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% declarations for jss.cls %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% to get the default layout:
<<echo=FALSE>>=
options(prompt = "R> ", continue = "+  ", width = 70, useFancyQuotes = FALSE)
Sys.setenv(TEXINPUTS=getwd(),
           BIBINPUTS=getwd(),
           BSTINPUTS=getwd())
@


%% almost as usual
\author{Daniel Saban\'es Bov\'e\\Hoffmann-La Roche Ltd \And
        Wai Yin Yeung\\Lancaster University \And
        Giuseppe Palermo\\Hoffmann-La Roche Ltd \And
        Thomas Jaki\\Lancaster University}
\title{Model-based Dose Escalation Designs in R with \pkg{crmPack}}

%% for pretty printing and a nice hypersummary also set:
\Plainauthor{Daniel Saban\'es Bov\'e,
    Wai Yin Yeung,
    Giuseppe Palermo,
    Thomas Jaki} %% comma-separated
\Plaintitle{Model-based Dose Escalation Designs in R with crmPack} %% without formatting
\Shorttitle{\pkg{crmPack}: Model-based Dose Escalation} %% a short title (if necessary)

%% an abstract and keywords
\Abstract{
%% todo: Abstract and keywords to be refined, only as a placeholder for now!
  Model-based dose escalation designs have gained increasing interest due to the need for more efficient and informative Phase I trials. The wide-spread implementation of such designs has been hindered by the need for either licensing specialized commercial software or programming the design and simulations from scratch for each project. Therefore we developed the R-package \pkg{crmPack}, which is now publicly available on CRAN. By providing a simple and unified object-oriented structure for model-based dose escalation designs, crmPack enables the use of standard designs, full flexibility to adapt designs to the project, and easy extension to new designs. The framework for the designs comprises the data structure, regression model and prior distribution specification, maximum increment rules, derivation of the next best dose, stopping rules for adaptive sample size, adaptive cohort sizes, and starting dose and dose grid specification. In addition to the classic continual reassessment method (CRM) and escalation with overdose control (EWOC) designs with possibly advanced prior specifications with e.g. mixtures and minimal informative priors, crmPack currently features dual-endpoint (safety and biomarker) designs and two-part (SAD followed by MAD part) designs. 
We introduce crmPack by outlining the design framework and show how easy it is to specify a design, run simulations, and report dose recommendations during the trial.
}
\Keywords{CRM, dose escalation, dual-endpoint design, \proglang{R}}
\Plainkeywords{CRM, dose escalation, dual-endpoint design, R} %% without formatting
%% at least one keyword must be supplied

%% publication information
%% NOTE: Typically, this can be left commented and will be filled out by the technical editor
%% \Volume{50}
%% \Issue{9}
%% \Month{June}
%% \Year{2012}
%% \Submitdate{2012-06-04}
%% \Acceptdate{2012-06-04}

%% The address of (at least) one author should be given
%% in the following format:
\Address{
  Daniel Saban\'es Bov\'e\\
  F. Hoffmann-La Roche Ltd\\
  Product Development Biostatistics\\
  Grenzacherstrasse 124\\
  4070 Basel, Switzerland\\
  E-mail: \email{sabanesd@roche.com}\\
  Telephone: +41/61/68-73470
}
%% It is also possible to add a telephone and fax number
%% before the e-mail in the following format:
%% Telephone: +43/512/507-7103
%% Fax: +43/512/507-2851

%% for those who use Sweave please include the following line (with % symbols):
%% need no \usepackage{Sweave.sty}

%% end of declarations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{document}
%\SweaveOpts{concordance=TRUE}

%% include your article here, just as usual
%% Note that you should use the \pkg{}, \proglang{} and \code{} commands.

%%\section[About Java]{About \proglang{Java}}
%% Note: If there is markup in \(sub)section, then it has to be escape as above.

\section{Introduction}



todo Daniel: 

- introduce dose escalation trials and in particular CRM designs. Use notation already from the \cite{Thall2010} paper



While the models underlying most model-based dose-escalation procedures can easily be fit in standard software with the capability to fit generalized linear models (e.g. \code{PROC MIXED} in \proglang{SAS}, \code{glm} in \proglang{Stata} or \proglang{R}), there are still only few software solutions available dedicated to dose-finding studies.  

The commercial packages \proglang{East} (Cytel, Cambridge, MA) and \proglang{ADDPLAN} (ICON, Dublin, Ireland) both offer extensions to their basic design software for dose-escalation studies (\pkg{ESCALATE} in \proglang{East} and \pkg{df} in \proglang{Addplan}) implementing the algorithmic 3+3 design \citep{carter1973} and various versions of the continual reassessment method \citep[CRM,][]{oquigley1990}. Similarly \proglang{FACTS} \citep{FACTS} also offers different common dose-escalation methods. Due to the commercial nature of these implementations there is, however, a limitation on how much the designs can be tailored towards the individual needs of the study.\\

Similarly static implementations of methods for dose-escalation are available in the \proglang{Stata} module \pkg{crm} \citep{StataCRM} which implements the CRM and the  \pkg{dfcrm} package in \proglang{R} which additionally implements the time-to-event CRM (TITE-CRM) \citep{cheung2000}. Finally the \pkg{bcrm} package \citep{sweeting2013} offers a wide range of different dose-escalation designs. It implements a variety of one and two parameter models, facilitates different ways to specify prior distributions, escalation and stopping rules.\\

In this paper we introduce the \proglang{R} package \pkg{crmPack} for dose-escalation studies. This package differs from existing implementations in three fundamental ways. Firstly it is written using a class structure that allows costumized methods to be added to the package while still being able to use the existing supporting functionalities. Secondly methods for studies with a placebo group (e.g. for healthy volunteer studies) are readily implemented. Thirdly dual endpoint dose-escalation methods that incorporate both safety and efficacy are available.\\

In Section~\ref{sec:framework} we describe the underlying structure of the package while Section~\ref{sec:using} provides some example of the usage of the package including how to add a costum method before we conclude with a discussion (Section~\ref{sec:discussion}). \\

todo Thomas:

- Explicit comparison against R-package bcrm - do we need more here?

\section{Framework}\label{sec:framework}

todo Daniel: 

- high level introduction of the framework, referencing the \cite{Thall2010} paper

- introduce the general class structure in the package

\section{Using crmPack }\label{sec:using}

\subsection{Implementing a CRM trial}

Before we start, we have to install and load our package in R
<<start>>=
library("crmPack")
@

We consider a trial in Type II diabetes carried out by Hoffmann-La Roche Ltd. For each subject, one response each of DLE and efficacy was observed. The DLE response is equal to 1 if any abnormal symptom is observed and 0 otherwise. In this Section we will show how to implement a CRM design for dose-escalation based on safety only.

Suppose that 12 dose levels ranging from 25 to 300 mg in 25 mg increments of a novel agent are available, defining our dose-grid, with 25 mg being our starting dose. Our primary objective in conducting the dose-escalation study is to characterize the dose-toxicity relationship and to estimate the MTD. We choose to use in this case a Bayesian Logistic regression with overdose control \citep{Neuenschwander2008} for which the corresponding two-parameters model is described below.

\begin{equation} \label{eq:LogisticLogNormal}
logit(Pr(Y=1 | x,\theta)) \equiv logit(\pi(x,\theta)) = \alpha + \beta log(\frac{x}{x^*})
\end{equation}

where $\theta = (\alpha,\beta)$, $x$ is the dose and $x^*$ is a reference dose.  

\subsubsection*{Prior definition}
\noindent
A fundamental component of any Bayesian approach is the \emph{Prior} distribution for the model parameters, in this case $\alpha$ and $\beta$, which need to be defined. If previous studies on the same or similar compound are available, one could think of using an informative prior. Here we assume only very limited information is available and we use a \emph{Minimal Informative Prior} \citep{Neuenschwander2008} which can be easily obtained with the function \code{MinimalInformative}. As a result the obtained prior will be defined in terms a bivariate normal distribution for $(\alpha,log(\beta))$. 

\textbf{Below max.time=1. Once the paper is finalized we could change it into max.time=300}
<<min-inf,warning=FALSE,message=FALSE,results='hide'>>=
coarseGrid <- c(25, 50, 100, 200, 300)
minInfModel <- 
  MinimalInformative(dosegrid = coarseGrid, refDose=100, logNormal=TRUE,
                     threshmin=0.1, threshmax=0.2, seed=432,
                     control=list(threshold.stop=0.05,max.time=1))
@

The result \texttt{minInfModel} is a list and \code{minInfModel$model} is an object of class \code{LogisticLogNormal}, corresponding to the model in (\ref{eq:LogisticLogNormal}), which contain our prior. A more general way to create an object of class \code{LogisticLogNormal} is with the initialization function:

<<init-LogisticLogNormal>>=
model <- LogisticLogNormal(mean=minInfModel$model@mean,
                           cov=minInfModel$model@cov,refDose=100)
@

\subsubsection*{Sampling from the posterior}

Based on the model with we just defined, we show next how to derive a posterior distribution of the model parameters, giving some data. We first need to create an object of \code{Data} class, containing our data, which can then be visualized by simply applying \code{plot} to the \code{data} object.

<<init-Data,warning=FALSE,message=FALSE,fig.width=4,fig.height=4,out.width='.3\\linewidth',fig.align='center'>>=
data <- Data(x=c(25,25,25, 50,50,50, 100,100,100), y=c(0,0,0, 0,0,0, 0,0,1),
             cohort=c(1,1,1, 2,2,2, 3,3,3), doseGrid=seq(25,300,25))
plot(data)
@

Now that we have the model (including the prior) and the data in place, we can use MCMC sampling for obtaining the posterior distribution of the model parameters given the data. The MCMC sampling can be controlled with an object of class \code{McmcOptions}, which is then provided to the \code{mcmc} function, together with the \code{data} and the \code{model} objects:

<<mcmc-sampling>>=
options <- McmcOptions(burnin=1000, step=2, samples=10000)

set.seed(94)
samples <- mcmc(data, model, options)
@

The posterior distribution for the $Pr(Y=1 | x)$ can be visualized by supplying the samples, model and data to the generic \code{plot} function, which generate the posterior mean curve and 95\% equi-tailed credible intervals at each point of the dose grid from the \texttt{data} object. Note that you can also produce a similar plot without any data and would corresponds basically to the model's prior.

<<plot-model-fit,fig.show='hold',fig.width=5,fig.height=5,out.width='.35\\linewidth',fig.align='center'>>=
plot(samples, model, data) + ggtitle("Posterior")

emptydata <- Data(doseGrid=data@doseGrid)
priorsamples <- mcmc(emptydata, model, options)
plot(priorsamples, model, emptydata) + ggtitle("Prior")
@


\subsubsection*{Rules for dose escalation}
In this section we present rules for dose-escalation, including how to choose the dose for the next cohort and how to decide when to stop the study. 

We start by defining our \texttt{increment} rules, with the function \code{IncrementsRelative}, and we decide to allow maximum dose increase of: 100\% for doses below 100 mg, 50\% for doses in the range [100,200) and 33\% for doses equal or above 200 mg. Based on this rule, the maximum allowed dose increase, given our current data, can be obtained with the function \code{maxDose}:

<<rel-incrs>>=
myIncrements <- IncrementsRelative(intervals=c(0,100,200), increments=c(1,0.5,0.33))
nextMaxDose  <- maxDose(myIncrements,data)
nextMaxDose
@

We then define the rule for selecting a dose for the next cohort. In this case we would like to select the dose which maximize the probability of the toxicity rate being in the target toxicity range [0.2,0.35], but with the probability of overdosing not exceeding 25\% \citep{Neuenschwander2008}. This rule can be created with the function \code{NextBestNCRM}. Based on this rule, the dose for the next cohort, given our current data, the maximum allowed dose increase as well the posterior samples and the model, can be obtained with the function \code{nextBest}, which would also produce a plot highlighting the next suggested dose:

<<nextBest-ncrm,fig.width=4,fig.height=4,out.width='.5\\linewidth',fig.align='center'>>=
myNextBest <- NextBestNCRM(target=c(0.2,0.35), overdose=c(0.35, 1),
                           maxOverdoseProb=0.25)
nextDose <- nextBest(myNextBest,nextMaxDose, samples, model, data)
nextDose$plot
@

The number of patients in the next cohort (cohort size) can be defined with rules inheriting from the class \code{CohortSize}. In this case we will use a \texttt{fixed} cohort size of 3 patients throughout the all study with the class \code{CohortSizeConst}. The function \code{size}, provided with the cohort-size rule, the suggested next dose and current data, will then output the size of the next cohort.

<<size-rules>>=
mySize <- CohortSizeConst(3)
size(mySize,nextDose$value,data)
@

Finally before dosing the next cohort of 3 patients at the recommended next dose of 100 mg, we want to check if the dose-escalation can actually be terminated based on our stopping rules. This can be achieved by calling the function \code{stopTrial} requiring an object of class \code{Stopping} containing our stopping rules which we define below. \\
We would like to stop if:

\begin{itemize}
  \item 30 patients were already dosed \textbf{OR}
  \item the probability to be in the target toxicity range is above 50\% \textbf{OR}
  \item 6 cohorts were already dosed \textbf{AND} 9 patients were dosed within +/- 20\% of the recommended next dose 
\end{itemize}

The output of \code{stopTrial} is of class \code{logical} and in this is case equals \code{FALSE}, meaning that based on our stopping rules the study should continue with the next cohort of 3 patients receiving a dose of 100 mg.

<<stop-rules,results='hide'>>=
myStopping1 <- StoppingMinCohorts(nCohorts=6)
myStopping2 <- StoppingMinPatients(nPatients=30)
myStopping3 <- StoppingTargetProb(target=c(0.2, 0.35),prob=0.5)
myStopping4 <- StoppingPatientsNearDose(nPatients = 9, percentage = 0.2)

myStopping <- myStopping2 | myStopping3 | (myStopping1 & myStopping4)
stopTrial(myStopping, nextDose$value, samples, model, data)
@

\subsubsection*{Deriving the Operating Characteristic of our CRM Design}
In the last topic of this section, we want to show how to assess the performance of a given CRM design. We first need to specify our design by creating an object of class \code{Design}. It contains our model, our rules for dose escalation (\code{Increments}, \code{nextBest}, \code{Stopping} and \code{cohortSize}), the dose grid (in the example below through the object \code{emptydata}) and our starting dose.

<<design-setup>>=
design <- Design(model=model, nextBest=myNextBest, stopping=myStopping,
                 increments=myIncrements, cohortSize=mySize,
                 data=emptydata,startingDose=25)
@

We can then start by looking at the \texttt{single trial} operating characteristics of the dose escalation design with the function \code{examine}, which generates a data frame showing the beginning of several hypothetical trial courses under the design. Assuming no DLTs have been seen until a certain dose, then the consequences of different number of DLTs being observed at this dose are shown.

<<design-examine>>=
set.seed(23)
examine(design,options)
@

For the \texttt{many trials} operating characteristics, we have to define a true scenario, from which the data should arise. In this case, this only requires a function that computes the probability of DLT given a dose. Here we use the function contained in the slot \code{prob} of the object \code{model}, for which the dose-toxicity curve is shown below.

<<true-def,fig.width=4,fig.height=4,out.width='.4\\linewidth',fig.align='center'>>=
myTruth <- function(dose){ model@prob(dose, alpha0=7, alpha1=8)}
curve(myTruth(x), from=0, to=80, ylim=c(0, 1)) # Plot the True Curve
@

Now we can proceed to the simulations using the function \code{simulate}, which requires as arguments our CRM design, the true toxicity profile, the total number of trials to be simulated and some MCMC options. The argument \code{parallel} can be set to \code{TRUE} if one wish to enable the use of all processors of the computer for running the simulations in parallel. This can yield a meaningful speedup, especially for larger number of simulations.

\textbf{Here nsim=10. Once the paper is finalized we could change it into nsim=1000}
<<run-sims>>=
mySims <- simulate(design, truth=myTruth, nsim=10,
                   seed=819,mcmcOptions=options,parallel=FALSE)
@

The result of this call is an object of class \texttt{Simulations} containing multiple slots. For example the \texttt{data} slot contains the list of produced \texttt{Data} objects of the simulated trials. Therefore, we can just use the \code{plot} function to plot the course of e.g. the third simulated trial (as shown below). The slots \code{doses} and \code{stopReasons} contain information about the final MTD and the stopping reason for each trial.

<<third-trial, fig.width=4,fig.height=4,out.width='.3\\linewidth',fig.align='center'>>=
plot(mySims@data[[3]])    # course of the third simulated trial
mySims@doses[3]           # MTD at the end of the third simulated trial
@

Furthermore, with this object, we can apply two methods. First, we can plot it, i.e. we can apply the \code{plot} method:

<<sim-plot, fig.width=4,fig.height=4,out.width='.5\\linewidth',fig.align='center'>>=
plot(mySims)
@

The resulting plot shows on the top panel a summary of the trial trajectories. On the bottom, the proportions of doses tried, averaged over the simulated trials, are shown. Note that you can select the plots by changing the \code{type} argument of \code{plot}, which by default is \code{type = c("trajectory", "dosesTried")}.

Second, we can summarize the simulation results with the \code{summary} method. Here again we have to supply a true dose-toxicity function.

<<sim-summary>>=
simSum <- summary(mySims,truth=myTruth)
simSum
@

A plot of the summary results, giving a bit more details than the textual summary, could be produced with the code \code{plot(simSum)}



\subsection{Dose escalation with safety and efficacy}


In this section, the dose-escalation procedures where two, the safety and efficacy endpoints are incorporated into the study will be introduced. The safety endpoint is the binary DLTs (dose-limiting toxicity) responses and the efficacy endpoint is the continuous biomarker/efficacy response. In this package, either these two responses are modeled jointly, using a single model class and assuming correlation; or are modeled separately using two separate model classes and assuming no correlation. First, the procedure where the two endpoints are modeled separately will be described. 

\textbf{Two Endpoints modeled with two dose-response models}

The procedures described below are proposed in \cite{yeung2015}. To start two models to be used to describe the relationship between the responses and their corresponding dose levels have to be defined. Assume that a total of $k$ dose levels have been considered in a study and denoted these dose levels as $d_{(1)},...,d_{(k)}$ and assume that these dose levels are of ascending order such that $d_{(1)} < ... < d_{(k)}$.\\

\textit{DLT model}\\

For the safety endpoint or the DLTs response, the two-parameter logistic regression model is used to model the relationship of the probabilities of the occurrence of DLTs and their corresponding dose levels given as 
\begin{equation}
p(d_{(j)})= \frac{{\rm exp}(\phi_1 + \phi_2 {\rm log}(d_{(j)}))}{1+ {\rm exp}(\phi_1 + \phi_2 {\rm log}(d_{(j)}))}
\end{equation}
 
for $j=1,...,k$. The parameters $\phi_1$ and $\phi_2$ are the corresponding intercept and slope parameter of this model. The values of $\phi_1$ and $\phi_2$ are positive to ensure a monotonically increasing relationship between the doses and their corresponding probabilities of the occurrence of a DLTs.

Before assign the first dose to the first or first cohort of subjects, we will express our initial beliefs concerning all unknown model parameters in the form of prior distribution. In here, the prior will be expressed in form of pseudo data, as if some data are available before the study begins. The method is described in details \cite{ww98} as follows. We begin by fixing two different dose levels $d_{-1}$ and $d_{0}$ and elicit clinical pharmacologists opinion on $p_{-1}$ and $p_{0}$, the likely probabilities of a DLTs occurring at these two dose levels. Usually $d_{-1}$ and $d_{0}$ are fixed with the lowest and highest dose levels, respectively.  

We express this opinion with some hypothetical number of number of subjects. Let $l=-1,0$ for $n_l$ subject treated at dose $l$, there will be $t_l$ subjects observed with DLTs and $u_l$ non-DLTs such that $p_l=t_l/n_l$. At stated in \cite{w06}, using the pseudo-data, the prior modal estimates of $\phi_1$ and $\phi_2$ obtained are the same as the maximum likelihood estimates which can be computed using standard statistical software fits. When more DLTs observations are available, standard software fits can be used to obtain posterior modal estimates for the model parameters.\\

\textit{Efficacy models}\\

For the continuous efficacy endpoint, the linear log-log model can be used to describe the dose-efficacy relationship. In here, efficacy responses of subjects without DLTs will be considered. First the parametric model will be shown . Let $n$ be the total number of subjects treated in a study. Given no DLTs responses, the efficacy response of subject $i$ is represented by 
\begin{equation}\label{loglog}
w_i = \theta_1 + \theta_2 {\rm log(log}d_i) +\epsilon _i
\end{equation}
for $1=1,...,s$ with $ s \leq n$ and $d_i$ represents the dose level given to subject $i$. In addition, with $\epsilon_i$ the random error term of subject $i$ with $\epsilon_i \sim N(0, \sigma^2)$. It is always common to use the ${\rm E_{max}}$ model to estimate the dose-efficacy relationship in clinical pharmacology context. In particular, we are interested to estimate efficacy curve under the ${\rm E_{max}}$ model with a shape such that the efficacy responses will increase sharply with increasing dose at lower dose levels and form a plateau at higher dose level. The advantages of using a linear log-log model instead are firstly this model give a similar shape than to the ${\rm E_{max}}$ model and secondly we only need to fit the intercept, $\theta_1$ and the slope, $\theta_2$ parameter instead of fitting four parameters in the ${\rm E_{max}}$ model. 
 
 Similarly, initial beliefs about the parameters $\theta_1$ and $\theta_2$ in this model are expressed in terms of pseudo-data. First two dose levels $d_{-1}$, usually the lowest and $d_{0}$, the highest dose levels are fixed and elicited clinical pharmacologists' opinion about the efficacy responses $w_{-1}$ and $w_0$ corresponding to the two fixed log-log dose levels $l_{-1}$ and $l_0$. The prior modal estimates of $\theta_1$ and $\theta_2$ can be obtained using standard fits in statistical software. Furthermore, given more observed responses of efficacy, the posterior modal estimates of the model parameters can be obtained using standard software fits.
 
Furthermore for $\nu=\sigma^{-2}$, either fixed values or gamma distributions will be specified as the prior and posterior distributions. 



\textbf{Corresponding Model classes in crmPack package}

The \texttt{ModelPseudo} class contains all model classes where their prior are specified in terms of pseudo data and standard maximum likelihood procedures from R can be used to obtain prior and posterior estimates. All models included in this package will have a parent class of either \texttt{GeneralModel} or \texttt{ModelPseudo}. In particular, all dose-responses models that can be used when the two endpoints are modeled separately are contained in \texttt{ModelPseudo} class.

There are two further sub-classes under \texttt{ModelPseudo} class which are the \texttt{ModelTox} class which contains all DLTs models and the \texttt{ModelEff} class which includes all efficacy models. The two-parameter dose-DLTs model describe earlier is defined as \texttt{LogisticIndepBeta} class model in the package and is also contained in \texttt{ModelTox} class. The linear log-log  described are defined as \texttt{Effloglog} contained under \texttt{ModelEff} class. Now we will demonstrate how we define these models on a fictional example. 

This is an example based on a trial in Type II diabetes carried out by Roche. The DLTs response equals to 1 if any abnormal symptom is observed on subject and 0 otherwise. An indication of efficacy is expressed via Dipeptidyl peptidase-4 (DPP4), which is an enzyme found on the surface of cells that plays a key role in glucose metabolism. The drug under investigation is intended to inhibit the DPP4 activity. A transform form of the DPP4 activity is used as the continuous efficacy endpoint. For subject $i$, the efficacy responses is defined as $$y_i=-{\rm log}\left(\frac{\textrm{DPP4 activity at hour 0, day 9}}{\textrm{DPP4 activity at hour 0, day 1}}\right).$$

We want to find the optimal dose level which represents the best trade-off between the DLTs and efficacy responses. Suppose 12 dose levels ranging from 25mg to 300 mg in 25mg increments are under investigation.
We can set up our data set before the trail start when no observations are available. That is we only need to specify the dose level that will be used for the trial
<<Data>>=
data1 <- Data(doseGrid=seq(25,300,25))
data2 <- DataDual(doseGrid=seq(25,300,25))
@

Both \texttt{data1} and \texttt{data2} are empty data set. If only DLTs response is incorporated into the escalation process, empty data set \texttt{data1} of class \texttt{Data} can be used. If both DLTs and efficacy responses are incorporated into the procedure, empty data set \texttt{data2} of class \texttt{DataDual} can be used.


Then we have to know the dose to be given to the first cohort of subjects. The initial beliefs of unknown parameters are expressed in form of pseudo-data. A conservative prior will be used representing what we fear rather than what we believe. The pseudo-data for the prior of the DLTS are shown in table \ref{tab:prior-DLE}

\begin{table}[H]
\centering
\caption{Pseudo-data for prior on parameters of DLE model\label{tab:prior-DLE}}
\begin{tabular}{|ccccc|}
\hline
&Dose(mg)&No. of administrations&DLEs&prob of DLEs\\
$l$&$d_l$&$n_l$&$t_l$&$p_l$\\
\hline
-1&25&3&1.05&0.35\\
0&300&3&1.80&0.60\\
\hline
\end{tabular}
\end{table}

The number of DLTs 1.05 and 1.8 are non-integer values, which is allowed in the imaginary nature of the pseudo-data. Then we can defined the two-parameter logistic DLT model as
<<DLTmodel>>=
DLTmodel <- LogisticIndepBeta(binDLE= c(1.05,1.8),
                              DLEweights=c(3,3),
                              DLEdose=c(25,300),
                              data=data1)
@

The model class \texttt{LogisticIndepBeta} is used. The prior of the model parameters are expressed in terms of pseudo data for this class. The slot \texttt{DLEdose} represented the two dose levels that we fixed, 25 and 300mg. The slot \texttt{binDLE} represented the two numbers of DLTs 1.05 and 1.8 at the two corresponding dose levels when 3 subjects are treated at each of the two dose levels, which represented by slot \texttt{DLEweights} with the vector $c(3,3)$. Since no real observations are available before the trial start, we will specify the \texttt{data} slot of this model with the empty data set \texttt{data1} as this slot require data set defined under class \texttt{Data}. To note that, since we have to fix at least two dose levels to express the opinion in form of pseudo data, slots \texttt{binDLE}, \texttt{DLEweights} and \texttt{DLEdose} must be specified with vectors of at least length 2 and the order of their elements must be consistent to the other two vectors.

We can look at the structure of this model 
<<str-model>>=
str(DLTmodel)
@

and access to their slots using the \verb|@| operator. For example, we can obtain the prior modal estimate of $\phi1$ the intercept parameter of this model by
 <<DLTmodel-phi1>>=
DLTmodel@phi1
@

If more observations are available, a new data set can be specified and hence using the \texttt{update} function to update the current model with the new data. After the update, the posterior modal estimate could then be obtained using the \verb|@| operator in the updated model.

For the efficacy response, we will use the linear log-log model in this example. Similarly, imagine clinical pharmacologists' opinions were obtained for efficacy responses at the lowest and the highest dose level and interpreted as 1.223 and 2.513 corresponds to the two dose levels if one subjects are treated at each of these doses. We will use a gamma distribution as the prior of the precision $\nu=\sigma^{-2}$ with $a=1$, the shape parameter and $b=0.025$, the rate parameter and $\sigma^2=\{E(\nu)\}^{-1}=0.025$ as the prior modal value. 

The efficacy model will be specified as
<<Effmodel>>=
Effmodel <- Effloglog(Eff= c(1.223,2.513),
                      Effdose=c(25,300),
                      nu=c(a=1,b=0.025),
                      data=data2)
@

The slot \texttt{Eff} represents the vector of pseudo efficacy responses at the two fixed dose levels. Each of these efficacy responses is a value given assuming one subject are treated at each of these dose levels. Slot \texttt{Effdose} is the vector for the fixed dose levels. We can specified a fixed value or values of the parameters of the prior gamma distribution of the precision $\nu$. In here, the prior gamma distribution is used for $\nu$ and we have to specify $a,b$ the shape and rate parameter in the slot \texttt{nu}. We will use the empty data set \texttt{data2} as slot \texttt{data} under this model requires data set defined under \texttt{DataDual} class. Similarly, we can also use \texttt{str()} to look at the structure of this model, using \verb|@| operator to obtain slots of this model and using \texttt{update} the update estimates of the model
<<update>>=
##new observations availabe and out in a data3
data3 <-DataDual(x=c(25,50,50,75,100,100,225,300),
                 y=c(0,0,0,0,1,1,1,1),
                 w=c(0.31,0.42,0.59,0.45,0.6,0.7,0.6,0.52),
                 doseGrid=seq(25,300,25))
newDLTmodel <- update(object=DLTmodel, data=data3)                
newEffmodel <- update(object=Effmodel, data=data3)                 
@


Furthermore, instead of using the prior or posterior estimates for the model parameters for evaluation, samples of model parameters can also be generated for all models defined under \texttt{ModelPseudo} class. This flexibility allows users to choose whether prior and posterior modal estimates or samples estimates are used for their evaluations. Using the \texttt{mcmc} function, we can generate samples using MCMC for any models defined under \texttt{AllModels} class.

<<samples>>=
options <- McmcOptions (burnin=100,
                        step=2,
                        samples=2000)
DLTsamples <- mcmc(data=data1, model = DLTmodel, options=options)
Effsamples <- mcmc(data=data2, model = Effmodel, options=options)
@

The MCMC sampling are controlled with an object of class \texttt{McmcOptions} and now the object \texttt{options} specifies that 2000 parameter samples will be created with a "burn-in" phase of 100 iterations that are discarded and save a sample every 2 iterations. We can also use \texttt{str()} to look at the structure of the samples and \texttt{get} function to extract samples of the model parameters such as 

<<getsamples>>=
phi1samples <- get(DLTsamples,"phi1")
@



\textit{Safety Constraints}\\

A study will be stopped when all dose levels under consideration are unsafe. Therefore, we will not allow subjects to administer to dose levels if the risk of DLTs us unacceptable. We define the target dose at 100$\pi$, $d={\rm TD} 100\pi$, the highest dose with the probability of a DLE occurring is less than or equal to $\pi$. Two DLTS 
limits for DLTs risk are fixed.: 1) $\gamma^{**}$ is the highest risk to be faced by subjects during the trial and 2) $\gamma^{*} \leq \gamma^{**}$ is the highest risk for subsequently treated subjects for future studies. We also denote the corresponding limiting doses by $d^*= {\rm TD}100\gamma^*$ and $d^{**}={\rm TD}100\gamma^{**}$, respectively. The slightly higher risk of DLE allowed during the study will allow
better exploration of the region of interest and hence improved
performance. Therefore, we will not administer any dose exceeding the current posterior estimate of $d^{**}$ to the next or next cohort of subjects. At the end of a trial, we do not recommend any dose exceeding the final posterior estimate of $d^*$.

If only the DLTs responses are incorporated into the dose-escalation process, the maximum dose level closest to the posterior estimate of $d^{**}$ will be given to the next or next cohort of subject. At the end of a trial, the maximum dose level closest to the final posterior estimate of $d^*$ will be recommended.


\textit{Escalation rule}\\

When two separate models are used to model dose-responses relationships, a gain function is used to determine the dose for the next or next cohort of subjects. This gain function is used to reflect the trade-off between efficacy and safety. Assume subject $i$ is treated at dose $j$, define the magnitude 
$$w'_j = \begin{cases} E(w_{(j)})& \textrm{if there is a DLT}\\ \kappa&\textrm{Otherwise}
\end{cases}$$
for $j=1,...,k$. The magnitude $w'_j$ is the expected efficacy response observed at dose $j$ given no DLTs is observed and $\kappa$ represents the efficacy responses when DLTs is observed. In general, $\kappa$ can be in any form to describe the dose–efficacy relationship for subjects observed
with DLE when administered to dose $j$. This 
 can be expressed in the form of a model that depends on dose $j$ or a single constant
value that does not depend on $j$.

The gain function associated with dose $j$ is defined as the expectation of the magnitude $w'_j$ such that
\begin{equation}
G_{(j)}=E(w'_j)=\frac{E(w_{(j)})}{1+{\rm exp}(\phi_1+\phi_2 {\rm log} d_{(j)})} + \frac{\kappa}{1+{\rm exp}(\phi_1+\phi_2 {\rm log}d_{(j)})}.
\end{equation}

In particular, we use $\kappa=0$ to represent there is no gain when a DLTs is observed. The gain function that we are using in here and in the package will be
\begin{equation}
G_{(j)}=\frac{E(w_{(j)})}{1+{\rm exp}(\phi_1+\phi_2 {\rm log} d_{(j)})} 
\end{equation}
for $j=1,...,k$. 

In other words, this gain function is represented as the expected efficacy responses times the probability of the occurrence of a DLTs. We have both the components for the efficacy and DLTs responses represented in one equation and reflect the inherent trade-off between efficacy and safety. The maximum dose level which gives the maximum gain value and satisfied the safety constraints will be administer to next or next cohort of subjects. Let $g^*$ be the dose which gives the maximum gain value. In other words. the maximum dose level of the minimum of the posterior estimate of $d^{**}$ and $g^*$ will be the next dose to be administered. At the end of the trial, the maximum dose level closest to the selected quantity, the posterior estimate of the minimum of $d^*$ and $g^*$ will be recommended for subsequent trials.\\

\textbf{Corresponding NextBest classes in crmPack package}\\

In this package, the rules to determine the dose for the next or next cohort of subjects are contained in the \texttt{NextBest} class. There are two main types of escalation rules: either only the binary DLTs responses are incorporated into the escalation process or both the binary DLTs and the continuous efficacy response are incorporated. In particular, classes \texttt{NextBestTD}, \texttt{NextBestTDSamples}, \texttt{NextBestMaxGain} and \texttt{NextBestMaxGainSamples} can be used with dose-responses models defined under \texttt{ModelPseudo} class. The first two classes relates to escalation rule we described in the above safety constraints section. We set $\gamma^*=0.3$ and $\gamma^{**}=0.35$ as the safety constraints in this example. 
 

When DLTs and efficacy responses are both incorporated into the procedure, \texttt{NextBestMaxGain} is the rule when no DLTs and efficacy samples are involved in the escalation while \texttt{NextBestMaxGainSamples} is the rule when both DLTs and efficacy samples are involved. 

<<NextBestGain>>=
GainNextBest <-NextBestMaxGain(DLEDuringTrialtarget=0.35,
                               DLEEndOfTrialtarget=0.3)
GainsamplesNextBest <- NextBestMaxGainSamples(DLEDuringTrialtarget=0.35,
                                   DLEEndOfTrialtarget=0.3,
                                   TDderive=function(TDsamples){
                                     quantile(TDsamples,prob=0.3)},
                                   Gstarderive=function(Gstarsamples){
                                     quantile(Gstarsamples,prob=0.5)})                             
@

Both the target probability of the occurrence of a DLTs to be used during, \texttt{DLEDuringTrialtarget} slot and at the end of the trial, slot \texttt{DLEEndOfTrialtarget} need to be specified. When DLTs and efficacy samples are involved, two further functions have to be specified in the corresponding class. Based on posterior samples generated, one function, slot \texttt{TDderive}, will be use to derive the estimates of dose corresponds to the target probability of DLTs to be used during and at the end of the trial, and the other , slot \texttt{Gstarderive}, will be used to derive the estimates of Gstar, the dose which gives the maximum gain value. In here, we will recommend 30\% posterior quantile of the samples to be estimates for the doses corresponding to the \texttt{DLEtargetDuringTrialtarget} and \texttt{DLEEndOfTrialtarget} doses and 50\% posterior quantile of the samples to be estimates for the doses corresponding to the Gstar, the dose which gives the maximum gain value.

In general under our package, we can apply the method \texttt{nextBest} to any of the classes defined under the parent \texttt{NextBest} class, in order to compute the next best dose for our study.

<<nextBest>>=
doseRecGain <- nextBest(GainNextBest,
                        doselimit=max(data3@doseGrid),
                        model=newDLTmodel,
                        Effmodel=newEffmodel,
                        data=data3)
             
@

This is an example when no DLT and efficacy samples are involved. For cases where samples are involved, additional slots of \texttt{samples} for DLT samples and \texttt{Effsamples} have to be specified in the \texttt{nextBest} method. From the example above, the escalation rule \texttt{GainNextBest}, the maximum dose in slot \texttt{doselimit}, the DLT model in slot \texttt{model}, the efficacy model in slot \texttt{Effmodel} and the data in slot \texttt{data} have to specified for the \texttt{nextBest} method. In addition, we can use the \verb|@| and \verb|$| operator to look at the structure or to obtain output value and plots. For example,
<<doseRecommendation>>=
doseRecGain$nextdose
doseRecGain$TDtargetDuringTrialEstimate
doseRecGain$GstarEstimate

print(doseRecGain$plot)
@

We can see that the estimates for Gstar is 79.4 and 52.3 for the dose with probability of DLTs equals to 0.35(DLEtargetDuringTrial). From our rule, we will select a dose which is safe and gives the maximum gain value.  In other words, we will select the dose at dose grid less than or equal to the minimum of 79.4 and 52.3, 50mg for the next cohort of subject as shown in above for next dose. Furthermore from the plot, the red, blue and green curves are the corresponding estimated curves for DLTs, efficacy and gain. From vertical lines in the plot show what will be the next and maximum dose allowable dose for the next cohort of subject, The circle, square and triangle symbols also show the estimates of the dose at target probability if DLTs during or end of trial and at maximum gain value.


\texttt{Stopping rules}

Subjects are treated sequentially in a study and the trial will stop if a the pre-specified number of subjects are treated or has met the criteria for any of the stopping rules. When we model the two endpoints separately with two dose-response models, one of the stopping rules that can be applied is when we obtain an 'accurate enough' estimates of the dose to recommend for subsequent trial. Based on the above escalation rule, the dose to recommend is the maximum dose level of the selected quantity, the minimum of $d^*$ and $g^*$. 

In particular, we can obtain the 95\% credibility interval (CI) of the selected quantity after each or each cohort of subjects treated. Hence, using this CI to decide whether we have obtain an 'accurate enough' estimate. The wider this CI, the less accurate of this CI. More specifically, the ratio of the upper to the lower limit of this CI is calculated. If this calculated ratio is less than or equal to a pre-specified value, the target ratio, the trial will stop. The smaller the value of the calculated ratio, the more accurate of the estimate. The smaller the value we specify for the target ratio, the more precise the estimate we can obtain to stop the trial. To note, the number of subjects to recruit in a study will increase when a more precise estimation of the estimates are required.\\

\textbf{Corresponding Stopping classes in crmPack package}\\

All of the stopping rules classes inherit directly from the \texttt{Stopping} class. The trial will stop if a fixed sample size is reached or one of the stopping criteria is fulfilled. The classes \texttt{StoppingTDCIRatio} and \texttt{StoppingTDSamplesCIRatio} are stopping rules when only DLTs response are incorporated. Under these two rules, the trial will stop if the ratio of the upper and the lower 95\% CI of the posterior estimate of $d^*$ is less than or equal to the pre-specified target ratio. The former class relates to escalation procedure when sample are not involved while the later relates to escalation when samples are involved. Similarly for \texttt{StoppingGstarCIRatio} and \texttt{StoppingGstarsamplesCIRatio} of having to calculate the ratio of the CI of the selected quantity (minimum of the posterior estimate of $d^*$ and $g^*$). They can be defined as 

<<Stopping>>=
myStopping1 <- StoppingMinPatients(nPatients=20)
myStopping2 <- StoppingGstarCIRatio(targetRatio=5,
                                    targetEndOfTrial = 0.3)
@

The \texttt{StoppingMinPatients} class objects can be used to stop the dose escalation if a minimum overall number of patients of 20 have been enrolled. The \texttt{StoppingGstarCIRatio} is the class object that can be used to stop the trial when the ratio of the upper to the lower 95\% CI of the selected quantity (minimum of $d^*$ and $g^*$) is less than equal to 5, specified in the \texttt{targetRatio} slot. In addition, the slot \texttt{targetEndOfTrial} for the target probability of DLTs to be used at the end of the trial are also specified with the value 0.3. There are more \texttt{Stopping} classes defined in this package. Please refer to the examples presented in the vignettes or in the help pages for further details.\\

\textbf{Simulations}\\

In order to access the operating characteristics of the dose-escalation procedure, we can simulate a trial for large number of times and examine the results obtained from simulations. Before we run simulations, We need to build a specific design under our package. The design will consists of model(s), the escalation rules, starting data, a cohort size and a starting dose. Especially for the escalation rule, we have to specify the \texttt{Increments}, the maximum allowable increments between doses; \texttt{NextBest}, the rule to derive the next best dose; \texttt{CohortSize}, the number of subjects treated each time; and \texttt{Stopping}, the stopping rule to stop the dose-escalation procedure. All increments rules in this package are contained in the \texttt{Increments} class. 
<<Increments>>=
myIncrements <- IncrementsRelative(intervals=c(25,300),
                                 increments=c(2,2))
@

The \texttt{IncrementsRelative} is one of the class object under \texttt{Increments} class. This is a class where we have the maximum relative increments will be calculated based on the current dose. In the example, we specify a maximum increase 200\% for doses up to 25mg and 200\% for dose above 25mg. Since we are looking into doses ranging from 25 to 300 mg in our example, in order words we defined a maximum of 3-fold increase in our study.

We also need to define the cohort size in our study and will use a size of 3 in our example. We can use \texttt{CohortSizeConst} class object if a fixed cohort size will be used throughout the study.
<<cohortsize>>=
mySize <- CohortSizeConst(size=3)
@

Please also refer to the vignettes example or the help pages for details about other class defined under \texttt{CohortSize} within our package.

Then now we can define the design for the simulations. The class objects \texttt{TDDesign}, \texttt{TDsamplesDesign}, \texttt{DualResponsesDesign} and \texttt{DualResponsesSamplesDesign} can be used with models defined under \texttt{ModelPseudo} class with or without samples involved. We will show an example on how we define a design when both DLTs and efficacy responses are incorporated into the escalation procedure and the \texttt{DualResponsesDesign} class object will be used. We want to start the simulations with an empty data set and start with the lowest dose 25 mg

<<design>>=
design1 <- DualResponsesDesign(nextBest=GainNextBest,
                               model=DLTmodel,
                               Effmodel=Effmodel,
                               data=data2,
                               stopping=myStopping1,
                               increments=myIncrements,
                               cohortSize=mySize,
                               startingDose=25)
@

We have used here all rules defined previously. Next we have to specify the scenario for the simulation particular, the true DLTs and efficacy model to used used.

<<scenario>>=
myTruthDLT<- function(dose)
{ DLTmodel@prob(dose, phi1=-53.66584, phi2=10.50499)
}

myTruthEff<- function(dose)
{Effmodel@ExpEff(dose,theta1=-4.818429,theta2=3.653058)
}

myTruthGain <- function(dose)
{return(myTruthEff(dose) * (1-myTruthDLT(dose)))}
@
Functions such as \texttt{curve} and \texttt{plot} can always be used to draw the real DLT, efficacy and gain curves. 

After establishing the real scenario, the trial can be simulated. The function \texttt{simulate} is used to simulate trial based a a specified scenario.

<<simulate>>=
Sim1 <- simulate(object=design1,
                 args=NULL,
                 trueDLE=myTruthDLT,
                 trueEff=myTruthEff,
                 trueNu=1/0.025,
                 nsim=20,
                 seed=819,
                 parallel=FALSE)
class(Sim1)

@

From the example, we specify the true precision (\texttt{trueNu}) of the efficacy response be 1/0.025 which also means using a variance of true value 0.025. The argument \texttt{arg} could contain additional arguments for the \texttt{trueDLE} or \texttt{trueEff} function and default as \texttt{NULL}. The number of simulations are specify with \texttt{nsim} and the random number generator seed with \texttt{seed}. The argument \texttt{parallel} can be used to enable running the simulations in parallel with all processors in the computer. The results \texttt{Sim1} will be put into one of the sub-class defined under the parent class \texttt{GeneralSimulations} within the package. Using the function \texttt{class}, we can see that the simulated results is a \texttt{PseudoDualSimulations} class object. This is a subclass of \texttt{PseudoSimulations} class object which is also a subclass of the \texttt{GeneralSimulations} class object. The descriptions of slots contains in the simulated results can be found at help pages of the corresponding class objects. In particular, the \texttt{data} slot contain a list of data produced of the simulated trial. For example, we can plot the course of the fourth simulated trial and find the final recommended dose of this trial by
<<plot-sim>>=
print(plot(Sim1@data[[4]]))
Sim1@doses[4]
@

Furthermore, we can also plot, summarized and plot the summary of the simulated results by
<<resultsplotsummary>>=
print(plot(Sim1))
SUM1 <- summary(Sim1,
        trueDLE=myTruthDLT,
        trueEff=myTruthEff)
SUM1

print(plot(SUM1))
@

The plot for \texttt{Sim1} gives an overview of the final dose recommendations, trial trajectories and a box plot of the efficacy variance. A textual summary is given using the \texttt{summary} function given the \texttt{trueDLE} and \texttt{trueEff}. Finally, summary of our simulations can also be shown graphically by applying \texttt{plot} to the summary. The plots of the summary gives an overview of the frequency (in percentage) for the total number of subject treated, the MTD estimates, proportion of DLTs observed and number of subjects treated above target across the simulated trials. The average estimated DLTs and efficacy curve are also given to compare to their corresponding real curves.

\subsubsection{Two Endpoints are jointly modeled}

--is this subsection necessary?

todo Winnie: 

- introduce dual endpoint designs, starting from pseudo prior approach for 
univariate design

- more details about the corresponding class structure

\subsection{Extending crmPack functionality}

todo Daniel/Winnie:

- example how new models / stopping rules can be implemented by the user -> important!


As described, the \pkg{crmPack} is constructed using S4 classes and methods. This allows users to extend our package easily by constructing their new codes to set up customized S4 classes and corresponding methods that can be used in junction with other existing classes and methods in the package.

One of the main framework of the S4 classes and methods defined in this package is \texttt{Model}. In this package, all dose-response models are contained in \texttt{AllModels} class and in either of the two subclasses \texttt{GeneralModel} or \texttt{ModelPseudo} of \texttt{AllModels} class. The models (classes) defined under \texttt{GeneralModel} involved MCMC sampling to obtain estimates for their model parameters where model parameters of models defined under \texttt{ModelPseudo} can be obtained without involving MCMC sampling. Two further subclasses, \texttt{ModelTox}, a class which contains all models for dose-toxicity relationship and \texttt{ModelEff}, a class which contains all model for dose-efficacy relationship are defined under \texttt{ModelPseudo}. 


The continual reassessment method (CRM), one of the most popular designs proposed in \citep{oquigley1990} for phase I dose-escalation trials. Assuming the risk of DLTs increases with doses, a one-parameter model is often assumed for CRM to describe the relationship between the binary DLT responses and their corresponding dose levels.
In the current version of the \pkg{crmPack}, only the two parameter logistic regression model of class \texttt{LogisticIndepBeta} are defined under \texttt{ModelTox} class. An example will now be given to demonstrate how to implement the one-parameter model in \pkg{crmPack}. Other implementations can be customized by users in a similar way to allow easy extension of the package.

For dose levels $d_{(1)} < ...< d_{(k)}$, the prior guess of corresponding probabilities of the occurrence of DLTs at dose $d_{(j)}$ is denoted by $\pi_j$ such that $\pi_1 < ...<\pi_k$. The one-parameter power model introduced in \citep{oquigley1990} will be used such that the probability of the occurrence of DLTs, $p(d_{(j)})$ at dose $j$ will be given as \begin{equation}
p(d_{(j)}) = \pi^{\theta}_j
\end{equation}
for $j=1,...,k$. An exponential distribution with distribution parameter $\lambda$ will be imposed as the prior distribution of the unknown parameter $\theta$. In particular, fix $\lambda=1$,  the prior is denoted by $\theta \sim {\rm Exp}(1)$ 
%with the prior probability density function denoted as 
%\begin{equation}
%h_0(\theta)= e^{-\theta}
%\end{equation}. 
In addition, the prior expectation $E_0(\theta)=1/\lambda= 1$ will be taken as the prior estimate of $\theta$. 

Given more binary DLT observations and the likelihood function of the prior and the observed DLT responses are known, the posterior likelihood density can be computed using Bayes theorem and is conjugate to the prior. 
Let $\boldsymbol y$ be the vector contain all DLT responses observed. 
%The likelihood of the observation $\boldsymbol y= (y_1,...,y_s)$ for subjects $1,...,s$ % given $\theta$ is given by \begin{equation*}
%f(\boldsymbol \textbf{y};\theta)= \prod^s_{i=1} (\pi_{d_{(i)}}^{\theta})^{y_i} (1- \pi_{d_{(i)}}^{\theta})^{(1-y_i)}.
%\end{equation*} 
%By Bayes theorem, we can deduce the probability density function of $\theta$ given the observations $\boldsymbol y$ which is written as
%\begin{equation*}
%h(\theta; \boldsymbol y)=\frac{h_0(\theta) f(\boldsymbol y;\theta)}{\int^{\infty}_0 h_0(\theta) f(\boldsymbol y;\theta) \,d\theta}.
%\end{equation*}
%This is called the posterior probability density function of $\theta$ given the observations $\boldsymbol y$. `
%The posterior expectation is then easily deduced from the above expressions as
%\begin{equation*}
%E(\theta; \boldsymbol y)=\int^{\infty}_{0} \theta h(\theta;\boldsymbol y) \,d\theta ,
%\end{equation*}

Then by integrating $\theta$ times the posterior density of $\theta$ from 0 to infinity, the expectation $E(\theta; \boldsymbol y)$ of $\theta$ can be obtained and will be used as the posterior estimate of $\theta$. Based the value of the posterior expectation of $\theta$, the updated posterior probabilities of the occurrence of DLT at each dose levels can obtained using the following equation
\begin{equation}
p(d_{(j)} ; \boldsymbol y) = \pi_j^ {E(\theta; \boldsymbol y)} 
\end{equation}
for dose $j=1,...,k$. 

Then in order to implement the one-parameter model in \pkg{crmPack}, an appropriate class has to be defined. This model will be defined under \texttt{ModelTox} such that instead of using MCMC sampling, the Bayes theorem will be used to obtain posterior estimates of the parameters.  
The code for defining this model class \texttt{OneParaExponential} consists of the following two sets of codes. First, a S4 model class has to be set up using \texttt{setClass} command

%\begin{CodeChunk}
%\begin{CodeInput}
<<classOnePara>>=
.OneParaExponential<-
  setClass(Class="OneParaExponential", 
           representation(priorprobDLT="numeric",
                          priorprobDose="numeric",
                          priorlambda="numeric",
                          probDLT="numeric",
                          meanTheta="numeric"),
           prototype(priorprobDLT=c(0,0),
                     priorprobDose=c(1,1),
                     priorlambda=1),
           contains="ModelTox")
@
%\end{CodeInput}
%\end{CodeChunk}

This class \texttt{OneParaExponential} is defined as extending the \texttt{ModelTox}. In other words, class \texttt{OneParaExponential} inherits all methods and slots from \texttt{ModelTox} class. The slots can be defined by users using \texttt{representation} and the initial value of these slots can also be specified using \texttt{prototype}.

Then a function has to be defined for this class and are given as follow.

%\begin{CodeChunk}
%\begin{CodeInput}
<<FunOnePara>>=
OneParaExponential<- function(priorprobDLT,
                              priorprobDose,
                              priorlambda,
                              data)
{##prior density function of theta
   h0 <- function(theta){exp(-theta)}
   ##if no observed DLE(data)
  if (length(data@y)==0){
    priormeanTheta <- 1/ priorlambda
    probDLT <- (priorprobDLT)^priormeanTheta
    meanTheta <- priormeanTheta
    } else {
                   f <- function(theta){
                        a1 <- length(data@x)
                        f0 <-1
                        for (j in 1:a1){
                         f0 <- f0 * ((priorprobDLT[which(data@x[j]==data@doseGrid)])^theta)^data@y[j] * 
                               (((1- priorprobDLT[which(data@x[j]==data@doseGrid)])^theta)^(1-data@y[j]))
                         }
                        return(f0)}
                     ##posterior denisty of theta
                     H <- function(theta){h0(theta)*f(theta)}
                     ##using Bayes theorem to obtain new estimate of the mean theta
                     ##denominator of the Bayes theorem
                     denom <- integrate(H,0,Inf)
                     ##Then for numerator
                     H2<- function(theta){H(theta)*theta}
                     numer <- integrate(H2,0,Inf)
                     meanTheta <- numer$value/denom$value
                     probDLT <- priorprobDLT^meanTheta
                     }
.OneParaExponential(datanames=c("nObs","y","x"),
                    data=data,
                    priorprobDLT=priorprobDLT,
                    priorprobDose=priorprobDose,
                    priorlambda=priorlambda,
                    probDLT=probDLT,
                    meanTheta=meanTheta,
                    dose=function(prob, meanTheta){
                       pj <- priorprobDLT^meanTheta
                       Ix1 <- max(which(pj <= prob))
                       Ix2 <- min(which(pj > prob))
                       DOSE <- priorprobDose[Ix1] + (priorprobDose[Ix2]-priorprobDose[Ix1])*(prob-pj[Ix1])/(pj[Ix2]-pj[Ix1])
                       return(DOSE)},
                     prob=function(dose,meanTheta){
                       pj <- priorprobDLT^meanTheta
                       IxD1 <- max(which(dose <= priorprobDose))
                       IxD2 <- min(which(dose > priorprobDose))
                       p1 <- pj[IxD1] + (pj[IxD2]-pj[IxD1])*(dose-priorprobDose[IxD1])/(priorprobDose[IxD2]-priorprobDose[IxD1])
                       return(p1)
                     }
  )
}
@
%\end{CodeInput}
%\end{CodeChunk}
 

Using this model class, the prior guess of the probabilities of the occurrence of DLE, their corresponding dose levels, the value of the parameter $\lambda$ of the prior exponential distribution for the model parameters and any observed DLE responses have to be specified. Assuming the dose levels considered are of ascending order, the initial guess of all these probabilities and their corresponding dose levels consider have to specify in form of vectors in slots \texttt{priorprobDLT} and \texttt{priorprobdose}, respectively. Since an exponential distribution will be used as the prior distribution of the only parameter in the dose-DLE model, a positive value of the parameter $\lambda$ of the exponential distribution has to be specified in slot \texttt{priorlambda}. Finally, any observed DLE responses can be specified in the \texttt{data} slot inherit from \texttt{ModelTox} class. Using this model, the prior and posterior mean value of the model parameter $\theta$ and probabilities of the occurrence of DLE at all dose levels are computed. The following commands will show how we define the model and obtain model parameters' estimates.

<<Onepara>>=
OneParaModel <- OneParaExponential(priorprobDLT=seq(0.1,0.98,0.08),
                                   priorprobDose=seq(25,300,25),
                                   priorlambda=1,data=data)
OneParaModel@meanTheta
OneParaModel@probDLT
@

Methods inherited from \texttt{ModelTox} class such as \texttt{dose} and \texttt{prob} can also be used for \texttt{OneParaExponential} class as shown.
<<dose-prob>>=
dose(prob=0.55,model=OneParaModel)
prob(dose=50,model=OneParaModel)
@

Users can also customized or set up other methods corresponds to this model class using the \texttt{setMethod} commands.  
-- May need to demonstrate here how the user can set up their method using setMethod? may be something about stopping method?



\section{Summary}\label{sec:discussion}

In this paper we have introduced the \proglang{R} package \pkg{crmPack} for analysing and evaluating dose-escalation trials. Unlike existing software the package is written to make full use of a class structure enabling easy extensions to user-specific dose-response models, prior distributions, escalation and stopping rules. The package does, however, already include a wide range of model-based and algorithmic dose-escalation procedures providing end-users easy access to these approaches without the need for further coding. Another unique feature of the package is the inclusion of approaches that allow placebo data, which are routinely collected in healthy volunteer studies, to be utilized. Finally some methods \cite[e.g.][]{bekele2005,yeung2015} for dose-finding incorporating safety and efficacy are readily implemented already in the package and the underlying structure to extend to novel dual endpoint methods is provided. Simulation facilities for all approaches and relevant graphical displays are also provided.\\

Future extensions of \pkg{crmPack} will include model-based combination dose-escalation designs, see for example \cite{Riviere2014} for a recent review. Furthermore, data-augmentation CRM designs \citep{Liu2013} that allow for shorter trial lengths when DLEs occur shortly after the first drug administration will be included.
\\


\bibliography{article}

\end{document}
